{
	"scope": "source.lua - entity - punctuation - keyword - string - meta.function.arguments.lua - meta.punctuation.lua - meta.method-call.lua",
	"completions": [
		{
			"trigger": "Line:CanChangeProtectedState\t()",
			"contents": "${1:Line}:CanChangeProtectedState()$0",
		},
		{
			"trigger": "Line:CreateAnimationGroup\t([\"name\"], [\"inheritsFrom\"])",
			"contents": "${1:Line}:CreateAnimationGroup(${2:[\"name\"]}, ${3:[\"inheritsFrom\"]})$0",
		},
		{
			"trigger": "Line:GetAlpha\t()",
			"contents": "${1:Line}:GetAlpha()$0",
		},
		{
			"trigger": "Line:GetAnimationGroups\t()",
			"contents": "${1:Line}:GetAnimationGroups()$0",
		},
		{
			"trigger": "Line:GetAtlas\t()",
			"contents": "${1:Line}:GetAtlas()$0",
		},
		{
			"trigger": "Line:GetBlendMode\t()",
			"contents": "${1:Line}:GetBlendMode()$0",
		},
		{
			"trigger": "Line:GetBottom\t()",
			"contents": "${1:Line}:GetBottom()$0",
		},
		{
			"trigger": "Line:GetCenter\t()",
			"contents": "${1:Line}:GetCenter()$0",
		},
		{
			"trigger": "Line:GetDebugName\t()",
			"contents": "${1:Line}:GetDebugName()$0",
		},
		{
			"trigger": "Line:GetDesaturation\t()",
			"contents": "${1:Line}:GetDesaturation()$0",
		},
		{
			"trigger": "Line:GetDrawLayer\t()",
			"contents": "${1:Line}:GetDrawLayer()$0",
		},
		{
			"trigger": "Line:GetEndPoint\t(\"point\", [relativeTo], [\"relativePoint\"], [xOffset], [yOffset])",
			"contents": "${1:Line}:GetEndPoint(\"${2:point}\", ${3:[relativeTo]}, \"${4:[relativePoint]}\", ${5:[xOffset]}, ${6:[yOffset]})$0",
		},
		{
			"trigger": "Line:GetHeight\t()",
			"contents": "${1:Line}:GetHeight()$0",
		},
		{
			"trigger": "Line:GetHorizTile\t()",
			"contents": "${1:Line}:GetHorizTile()$0",
		},
		{
			"trigger": "Line:GetLeft\t()",
			"contents": "${1:Line}:GetLeft()$0",
		},
		{
			"trigger": "Line:GetName\t()",
			"contents": "${1:Line}:GetName()$0",
		},
		{
			"trigger": "Line:GetNonBlocking\t()",
			"contents": "${1:Line}:GetNonBlocking()$0",
		},
		{
			"trigger": "Line:GetObjectType\t()",
			"contents": "${1:Line}:GetObjectType()$0",
		},
		{
			"trigger": "Line:GetParent\t()",
			"contents": "${1:Line}:GetParent()$0",
		},
		{
			"trigger": "Line:GetRect\t()",
			"contents": "${1:Line}:GetRect()$0",
		},
		{
			"trigger": "Line:GetRight\t()",
			"contents": "${1:Line}:GetRight()$0",
		},
		{
			"trigger": "Line:GetSize\t()",
			"contents": "${1:Line}:GetSize()$0",
		},
		{
			"trigger": "Line:GetStartPoint\t(\"point\", [relativeTo], [\"relativePoint\"], [xOffset], [yOffset])",
			"contents": "${1:Line}:GetStartPoint(\"${2:point}\", ${3:[relativeTo]}, \"${4:[relativePoint]}\", ${5:[xOffset]}, ${6:[yOffset]})$0",
		},
		{
			"trigger": "Line:GetTexCoord\t()",
			"contents": "${1:Line}:GetTexCoord()$0",
		},
		{
			"trigger": "Line:GetTexture\t()",
			"contents": "${1:Line}:GetTexture()$0",
		},
		{
			"trigger": "Line:GetThickness\t()",
			"contents": "${1:Line}:GetThickness()$0",
		},
		{
			"trigger": "Line:GetTop\t()",
			"contents": "${1:Line}:GetTop()$0",
		},
		{
			"trigger": "Line:GetVertexColor\t()",
			"contents": "${1:Line}:GetVertexColor()$0",
		},
		{
			"trigger": "Line:GetVertexOffset\t(vertexIndex)",
			"contents": "${1:Line}:GetVertexOffset(${2:vertexIndex})$0",
		},
		{
			"trigger": "Line:GetVertTile\t()",
			"contents": "${1:Line}:GetVertTile()$0",
		},
		{
			"trigger": "Line:GetWidth\t()",
			"contents": "${1:Line}:GetWidth()$0",
		},
		{
			"trigger": "Line:Hide\t()",
			"contents": "${1:Line}:Hide()$0",
		},
		{
			"trigger": "Line:IsDesaturated\t()",
			"contents": "${1:Line}:IsDesaturated()$0",
		},
		{
			"trigger": "Line:IsDragging\t()",
			"contents": "${1:Line}:IsDragging()$0",
		},
		{
			"trigger": "Line:IsForbidden\t()",
			"contents": "${1:Line}:IsForbidden()$0",
		},
		{
			"trigger": "Line:IsIgnoringParentAlpha\t()",
			"contents": "${1:Line}:IsIgnoringParentAlpha()$0",
		},
		{
			"trigger": "Line:IsIgnoringParentScale\t()",
			"contents": "${1:Line}:IsIgnoringParentScale()$0",
		},
		{
			"trigger": "Line:IsMouseOver\t([topOffset], [leftOffset], [bottomOffset], [rightOffset])",
			"contents": "${1:Line}:IsMouseOver(${2:[topOffset]}, ${3:[leftOffset]}, ${4:[bottomOffset]}, ${5:[rightOffset]})$0",
		},
		{
			"trigger": "Line:IsObjectLoaded\t()",
			"contents": "${1:Line}:IsObjectLoaded()$0",
		},
		{
			"trigger": "Line:IsObjectType\t()",
			"contents": "${1:Line}:IsObjectType()$0",
		},
		{
			"trigger": "Line:IsProtected\t()",
			"contents": "${1:Line}:IsProtected()$0",
		},
		{
			"trigger": "Line:IsRectValid\t()",
			"contents": "${1:Line}:IsRectValid()$0",
		},
		{
			"trigger": "Line:IsShown\t()",
			"contents": "${1:Line}:IsShown()$0",
		},
		{
			"trigger": "Line:IsVisible\t()",
			"contents": "${1:Line}:IsVisible()$0",
		},
		{
			"trigger": "Line:SetAlpha\t(alpha)",
			"contents": "${1:Line}:SetAlpha(${2:alpha})$0",
		},
		{
			"trigger": "Line:SetAtlas\t(\"texture\", useAtlasSize)",
			"contents": "${1:Line}:SetAtlas(${2:\"texture\"}, ${3:useAtlasSize})$0",
		},
		{
			"trigger": "Line:SetBlendMode\t(\"mode\")",
			"contents": "${1:Line}:SetBlendMode(${2:\"mode\"})$0",
		},
		{
			"trigger": "Line:SetColorLine\t(red, green, blue, [alpha])",
			"contents": "${1:Line}:SetColorLine(${2:red}, ${3:green}, ${4:blue}, ${5:[alpha]})$0",
		},
		{
			"trigger": "Line:SetDesaturated\t(enable)",
			"contents": "${1:Line}:SetDesaturated(${2:enable})$0",
		},
		{
			"trigger": "Line:SetDesaturation\t(enable)",
			"contents": "${1:Line}:SetDesaturation(${2:enable})$0",
		},
		{
			"trigger": "Line:SetDrawLayer\t(\"layer\", sublayer)",
			"contents": "${1:Line}:SetDrawLayer(\"${2:layer}\", ${3:sublayer})$0",
		},
		{
			"trigger": "Line:SetEndPoint\t(\"point\", [relativeTo], [\"relativePoint\"], [xOffset], [yOffset])",
			"contents": "${1:Line}:SetEndPoint(\"${2:point}\", ${3:[relativeTo]}, \"${4:[relativePoint]}\", ${5:[xOffset]}, ${6:[yOffset]})$0",
		},
		{
			"trigger": "Line:SetForbidden\t()",
			"contents": "${1:Line}:SetForbidden()$0",
		},
		{
			"trigger": "Line:SetGradient\t(\"orientation\", startR, startG, startB, endR, endG, endB)",
			"contents": "${1:Line}:SetGradient(\"${2:orientation}\", ${3:startR}, ${4:startG}, ${5:startB}, ${6:endR}, ${7:endG}, ${8:endB})$0",
		},
		{
			"trigger": "Line:SetGradientAlpha\t(\"orientation\", startR, startG, startB, startAlpha, endR, endG, endB, endAlpha)",
			"contents": "${1:Line}:SetGradientAlpha(\"${2:orientation}\", ${3:startR}, ${4:startG}, ${5:startB}, ${6:startAlpha}, ${7:endR}, ${8:endG}, ${9:endB}, ${10:endAlpha})$0",
		},
		{
			"trigger": "Line:SetHorizTile\t(enable)",
			"contents": "${1:Line}:SetHorizTile(${2:enable})$0",
		},
		{
			"trigger": "Line:SetIgnoreParentAlpha\t(enable)",
			"contents": "${1:Line}:SetIgnoreParentAlpha(${2:enable})$0",
		},
		{
			"trigger": "Line:SetIgnoreParentScale\t(enable)",
			"contents": "${1:Line}:SetIgnoreParentScale(${2:enable})$0",
		},
		{
			"trigger": "Line:SetMask\t(\"texture\")",
			"contents": "${1:Line}:SetMask(${2:\"texture\"})$0",
		},
		{
			"trigger": "Line:SetNonBlocking\t(nonBlocking)",
			"contents": "${1:Line}:SetNonBlocking(${2:nonBlocking})$0",
		},
		{
			"trigger": "Line:SetParent\t(frame)",
			"contents": "${1:Line}:SetParent(${2:frame})$0",
		},
		{
			"trigger": "Line:SetRotation\t(radians)",
			"contents": "${1:Line}:SetRotation(${2:radians})$0",
		},
		{
			"trigger": "Line:SetShown\t(enable)",
			"contents": "${1:Line}:SetShown(${2:enable})$0",
		},
		{
			"trigger": "Line:SetStartPoint\t(\"point\", [relativeTo], [\"relativePoint\"], [xOffset], [yOffset])",
			"contents": "${1:Line}:SetStartPoint(\"${2:point}\", ${3:[relativeTo]}, \"${4:[relativePoint]}\", ${5:[xOffset]}, ${6:[yOffset]})$0",
		},
		{
			"trigger": "Line:SetTexCoord\t(left, right, top, bottom)",
			"contents": "${1:Line}:SetTexCoord(${2:left}, ${3:right}, ${4:top}, ${5:bottom})$0",
		},
		{
			"trigger": "Line:SetTexCoord\t(ULx, ULy, LLx, LLy, URx, URy, LRx, LRy)",
			"contents": "${1:Line}:SetTexCoord(${2:ULx}, ${3:ULy}, ${4:LLx}, ${5:LLy}, ${6:URx}, ${7:URy}, ${8:LRx}, ${9:LRy})$0",
		},
		{
			"trigger": "Line:SetTexture\t(red, green, blue, [alpha])",
			"contents": "${1:Line}:SetTexture(${2:red}, ${3:green}, ${4:blue}, ${5:[alpha]})$0",
		},
		{
			"trigger": "Line:SetTexture\t(\"texture\")",
			"contents": "${1:Line}:SetTexture(\"${2:texture}\")$0",
		},
		{
			"trigger": "Line:SetThickness\t(thickess)",
			"contents": "${1:Line}:SetThickness(${2:thickess})$0",
		},
		{
			"trigger": "Line:SetVertexColor\t(red, green, blue, [alpha])",
			"contents": "${1:Line}:SetVertexColor(${2:red}, ${3:green}, ${4:blue}, ${5:[alpha]})$0",
		},
		{
			"trigger": "Line:SetVertexOffset\t(vertexIndex, x, y)",
			"contents": "${1:Line}:SetVertexOffset(${2:vertexIndex}, ${3:x}, ${4:y})$0",
		},
		{
			"trigger": "Line:SetVertTile\t(enable)",
			"contents": "${1:Line}:SetVertTile(${2:enable})$0",
		},
		{
			"trigger": "Line:Show\t()",
			"contents": "${1:Line}:Show()$0",
		},
		{
			"trigger": "Line:StopAnimating\t()",
			"contents": "${1:Line}:StopAnimating()$0",
		},




		{
			"trigger": "_Line:CanChangeProtectedState\t()",
			"contents": "${1:canChange} = ${2:Line}:CanChangeProtectedState()$0",
		},
		{
			"trigger": "_Line:GetAlpha\t()",
			"contents": "${1:alpha} = ${2:Line}:GetAlpha()$0",
		},
		{
			"trigger": "_Line:GetAnimationGroups\t()",
			"contents": "${1:...} = ${2:Line}:GetAnimationGroups()$0",
		},
		{
			"trigger": "_Line:GetAtlas\t()",
			"contents": "${1:atlasFile} = ${2:Line}:GetAtlas()$0",
		},
		{
			"trigger": "_Line:GetBlendMode\t()",
			"contents": "${1:mode} = ${2:Line}:GetBlendMode()$0",
		},
		{
			"trigger": "_Line:GetBottom\t()",
			"contents": "${1:bottom} = ${2:Line}:GetBottom()$0",
		},
		{
			"trigger": "_Line:GetCenter\t()",
			"contents": "${1:x}, ${2:y} = ${3:Line}:GetCenter()$0",
		},
		{
			"trigger": "_Line:GetDebugName\t()",
			"contents": "${1:name} = ${2:Line}:GetDebugName()$0",
		},
		{
			"trigger": "_Line:GetDesaturation\t()",
			"contents": "${1:desaturated} = ${2:Line}:GetDesaturation()$0",
		},
		{
			"trigger": "_Line:GetDrawLayer\t()",
			"contents": "${1:layer}, ${2:sublayer} = ${3:Line}:GetDrawLayer()$0",
		},
{
			"trigger": "_Line:GetEndPoint\t(index)",
			"contents": "${1:point}, ${2:relativeTo}, ${3:relativePoint}, ${4:xOffset}, ${5:yOffset} = ${6:Line}:GetEndPoint(${7:index})$0",
		},
		{
			"trigger": "_Line:GetHeight\t()",
			"contents": "${1:height} = ${2:Line}:GetHeight()$0",
		},
		{
			"trigger": "_Line:GetHorizTile\t()",
			"contents": "${1:enabled} = ${2:Line}:GetHorizTile()$0",
		},
		{
			"trigger": "_Line:GetLeft\t()",
			"contents": "${1:left} = ${2:Line}:GetLeft()$0",
		},
		{
			"trigger": "_Line:GetName\t()",
			"contents": "${1:name} = ${2:Line}:GetName()$0",
		},
		{
			"trigger": "_Line:GetNonBlocking\t()",
			"contents": "${1:nonBlocking} = ${2:Line}:GetNonBlocking()$0",
		},
		{
			"trigger": "_Line:GetObjectType\t()",
			"contents": "${1:type} = ${2:Line}:GetObjectType()$0",
		},
		{
			"trigger": "_Line:GetRect\t()",
			"contents": "${1:left}, ${2:bottom}, ${3:width}, ${4:height} = ${5:Line}:GetRect()$0",
		},
		{
			"trigger": "_Line:GetRight\t()",
			"contents": "${1:right} = ${2:Line}:GetRight()$0",
		},
		{
			"trigger": "_Line:GetSize\t()",
			"contents": "${1:width}, ${2:height} = ${3:Line}:GetSize()$0",
		},
		{
			"trigger": "_Line:GetStartPoint\t(index)",
			"contents": "${1:point}, ${2:relativeTo}, ${3:relativePoint}, ${4:xOffset}, ${5:yOffset} = ${6:Line}:GetStartPoint(${7:index})$0",
		},
		{
			"trigger": "_Line:GetTexCoord\t()",
			"contents": "${1:ULx}, ${2:ULy}, ${3:LLx}, ${4:LLy}, ${5:URx}, ${6:URy}, ${7:LRx}, ${8:LRy} = ${9:Line}:GetTexCoord()$0",
		},
		{
			"trigger": "_Line:GetTexture\t()",
			"contents": "${1:texture} = ${2:Line}:GetTexture()$0",
		},
		{
			"trigger": "_Line:GetThickness\t()",
			"contents": "${1:thickess} = ${2:Line}:GetThickness()$0",
		},
		{
			"trigger": "_Line:GetTop\t()",
			"contents": "${1:top} = ${2:Line}:GetTop()$0",
		},
		{
			"trigger": "_Line:GetVertexColor\t()",
			"contents": "${1:red}, ${2:green}, ${3:blue}, ${4:alpha} = ${5:Line}:GetVertexColor()$0",
		},
		{
			"trigger": "_Line:GetVertexOffset\t(vertexIndex)",
			"contents": "${1:x}, ${2:y} = ${3:Line}:GetVertexOffset(${4:vertexIndex})$0",
		},
		{
			"trigger": "_Line:GetVertTile\t()",
			"contents": "${1:enabled} = ${2:Line}:GetVertTile()$0",
		},
		{
			"trigger": "_Line:GetWidth\t()",
			"contents": "${1:width} = ${2:Line}:GetWidth()$0",
		},
		{
			"trigger": "_Line:IsDesaturated\t()",
			"contents": "${1:desaturated} = ${2:Line}:IsDesaturated()$0",
		},
		{
			"trigger": "_Line:IsDragging\t()",
			"contents": "${1:isDragging} = ${2:Line}:IsDragging()$0",
		},
		{
			"trigger": "_Line:IsForbidden\t()",
			"contents": "${1:isForbidden} = ${2:Line}:IsForbidden()$0",
		},
		{
			"trigger": "_Line:IsIgnoringParentAlpha\t()",
			"contents": "${1:isIgnoring} = ${2:Line}:IsIgnoringParentAlpha()$0",
		},
		{
			"trigger": "_Line:IsIgnoringParentScale\t()",
			"contents": "${1:isIgnoring} = ${2:Line}:IsIgnoringParentScale()$0",
		},
		{
			"trigger": "_Line:IsMouseOver\t([topOffset], [leftOffset], [bottomOffset], [rightOffset])",
			"contents": "${1:isOver} = ${2:Line}:IsMouseOver(${3:[topOffset]}, ${4:[leftOffset]}, ${5:[bottomOffset]}, ${6:[rightOffset]})$0",
		},
		{
			"trigger": "_Line:IsObjectLoaded\t()",
			"contents": "${1:loaded} = ${2:Line}:IsObjectLoaded()$0",
		},
		{
			"trigger": "_Line:IsObjectType\t(\"type\")",
			"contents": "${1:isType} = ${2:Line}:IsObjectType(\"${3:type}\")$0",
		},
		{
			"trigger": "_Line:IsProtected\t()",
			"contents": "${1:isProtected}, ${2:explicit} = ${3:Line}:IsProtected()$0",
		},
		{
			"trigger": "_Line:IsRectValid\t()",
			"contents": "${1:isValid} = ${2:Line}:IsRectValid()$0",
		},
		{
			"trigger": "_Line:IsShown\t()",
			"contents": "${1:shown} = ${2:Line}:IsShown()$0",
		},
		{
			"trigger": "_Line:IsVisible\t()",
			"contents": "${1:visible} = ${2:Line}:IsVisible()$0",
		},




		{
			"trigger": "_Line\thelp",
			"contents": "Line = {\n\tinherits = {\n\t\t\"Line\",\n\t\t\"Texture\",\n\t\t\"LayeredRegion\",\n\t\t\"VisibleRegion\",\n\t\t\"Region\",\n\t\t\"ParentedObject\",\n\t\t\"UIObject\",\n\t},\n\tmethods = {\n\t\t\"CanChangeProtectedState\", -- Returns whether protected properties of the region can be changed by non-secure scripts\n\t\t\"CreateAnimationGroup\", -- Creates a new animation group as a child of the region\n\t\t\"GetAlpha\", -- Returns the opacity of the region relative to it's parent\n\t\t\"GetAnimationGroups\", -- Returns a list of animation groups belonging to the region\n\t\t\"GetAtlas\", -- Returns the currently set atlas table's name\n\t\t\"GetBlendMode\", -- Returns the blend mode of the texture\n\t\t\"GetBottom\", -- Returns the distance from the bottom of the screen to the bottom of the region\n\t\t\"GetCenter\", -- Returns the screen coordinates of the region's center\n\t\t\"GetDebugName\", -- Returns the widget object's debug name\n\t\t\"GetDesaturation\", -- Returns whether the texture image should be displayed with zero saturation\n\t\t\"GetDrawLayer\", -- Returns the layer at which the region's graphics are drawn relative to others in it's frame\n\t\t\"GetEndPoint\", -- Returns the point at which the line ends\n\t\t\"GetHeight\", -- Returns the height of the region\n\t\t\"GetHorizTile\", -- Returns the horizonal tiling behaviour of the texture\n\t\t\"GetLeft\", -- Returns the distance from the left edge of the screen to the left edge of the region\n\t\t\"GetName\", -- Returns the widget object's name\n\t\t\"GetNonBlocking\", -- Returns whether the texture object loads it's image file in the background\n\t\t\"GetObjectType\", -- Returns the object's widget type\n\t\t\"GetParent\", -- Returns the object's parent object\n\t\t\"GetRect\", -- Returns the position and dimensions of the region\n\t\t\"GetRight\", -- Returns the distance from the left edge of the screen to the right edge of the region\n\t\t\"GetSize\", -- Returns the width and height of the region\n\t\t\"GetStartPoint\", -- Returns the point from where the line starts\n\t\t\"GetTexCoord\", -- Returns corner coordinates for scaling or cropping the texture image\n\t\t\"GetTexture\", -- Returns the path to the texture's image file\n\t\t\"GetThickness\", -- Returns this line's thickness\n\t\t\"GetTop\", -- Returns the distance from the bottom of the screen to the top of the region\n\t\t\"GetVertexColor\", -- Returns the shading color of the texture\n\t\t\"GetVertexOffset\", -- Returns the offset parameters for the texture's vertex index\n\t\t\"GetVertTile\", -- Returns the vertical tiling behaviour of the texture\n\t\t\"GetWidth\", -- Returns the width of the region\n\t\t\"Hide\", -- Hides the region\n\t\t\"IsDesaturated\", -- Returns whether the texture image should be displayed with zero saturation\n\t\t\"IsDragging\", -- Returns whether the region is currently being dragged\n\t\t\"IsForbidden\", -- Returns if this widget's methods may only be called from secure execution paths\n\t\t\"IsIgnoringParentAlpha\", -- Returns if the region is ignoring it's parent alpha changes\n\t\t\"IsIgnoringParentScale\", -- Returns if the region is ignoring it's parent scale changes\n\t\t\"IsMouseOver\", -- Returns whether the mouse cursor is over the given region\n\t\t\"IsObjectLoaded\", -- Returns whether the object is loaded\n\t\t\"IsObjectType\", -- Returns whether the object belongs to a given widget type\n\t\t\"IsProtected\", -- Returns whether the region is protected\n\t\t\"IsRectValid\", -- Returns whether the region's rect size is valid\n\t\t\"IsShown\", -- Returns whether the region is shown\n\t\t\"IsVisible\", -- Returns whether the region is visible\n\t\t\"SetAlpha\", -- Sets the opacity of the region relative to it's parent\n\t\t\"SetAtlas\", -- Sets corner coordinates for scaling or cropping the texture image based on a predefined atlas table's values\n\t\t\"SetBlendMode\", -- Sets the blend mode of the texture\n\t\t\"SetColorTexture\", -- Sets the color of the texture\n\t\t\"SetDesaturated\", -- Sets whether the texture image should be displayed with zero saturation\n\t\t\"SetDesaturation\", -- Sets whether the texture image should be displayed with zero saturation\n\t\t\"SetDrawLayer\", -- Sets the layer at which the region's graphics are drawn relative to others in it's frame\n\t\t\"SetEndPoint\", -- Sets the point at which the line ends\n\t\t\"SetForbidden\", -- Sets whether the modification of the object's secure methods are forbidden while in combat\n\t\t\"SetGradient\", -- Sets a gradient color shading for the texture\n\t\t\"SetGradientAlpha\", -- Sets a gradient color shading and their opacity values for the texture\n\t\t\"SetHorizTile\", -- Sets horizontal tiling behaviour for the texture\n\t\t\"SetIgnoreParentAlpha\", -- Sets if the region should ignore it's parent alpha changes\n\t\t\"SetIgnoreParentScale\", -- Sets if the region should ignore it's parent scale changes\n\t\t\"SetMask\", -- Applies alpha channel from one texture to another texture\n\t\t\"SetNonBlocking\", -- Sets whether the texture object loads it's image file in the background\n\t\t\"SetParent\", -- Sets another frame the parent of this region\n\t\t\"SetRotation\", -- Rotates the texture image\n\t\t\"SetShown\", -- Sets whether the region should be visible or hidden\n\t\t\"SetStartPoint\", -- Sets the point from where the line starts\n\t\t\"SetTexCoord\", -- Sets corner coordinates for scaling or cropping the texture image\n\t\t\"SetTexture\", -- Sets the texture object's image\n\t\t\"SetThickness\", -- Sets this line's thickness\n\t\t\"SetVertexColor\", -- Sets a color shading for the region's graphics\n\t\t\"SetVertexOffset\", -- Sets the offset parameters for the texture's vertex index\n\t\t\"SetVertTile\", -- Sets the vertical tiling behaviour for the texture\n\t\t\"Show\", -- Shows the region\n\t\t\"StopAnimating\", -- Stops any active animations involving the region or it's children\n\t},\n}",
		},
	]
}
