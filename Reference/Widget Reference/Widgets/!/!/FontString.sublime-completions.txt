{
	"scope": "source.lua - entity - punctuation - keyword - string",
	"completions": [
		{
			"trigger": "FontString:CanChangeProtectedState\t()",
			"contents": "${1:FontString}:CanChangeProtectedState()$0",
		},
		{
			"trigger": "FontString:CanNonSpaceWrap\t()",
			"contents": "${1:FontString}:CanNonSpaceWrap()$0",
		},
		{
			"trigger": "FontString:CanWordWrap\t()",
			"contents": "${1:FontString}:CanWordWrap()$0",
		},
		{
			"trigger": "FontString:ClearAllPoints\t()",
			"contents": "${1:FontString}:ClearAllPoints()$0",
		},
		{
			"trigger": "FontString:CreateAnimationGroup\t([\"name\"], [\"inheritsFrom\"])",
			"contents": "${1:FontString}:CreateAnimationGroup(${2:[\"name\"]}, ${3:[\"inheritsFrom\"]})$0",
		},
		{
			"trigger": "FontString:GetAlpha\t()",
			"contents": "${1:FontString}:GetAlpha()$0",
		},
		{
			"trigger": "FontString:GetAnimationGroups\t()",
			"contents": "${1:FontString}:GetAnimationGroups()$0",
		},
		{
			"trigger": "FontString:GetBottom\t()",
			"contents": "${1:FontString}:GetBottom()$0",
		},
		{
			"trigger": "FontString:GetCenter\t()",
			"contents": "${1:FontString}:GetCenter()$0",
		},
		{
			"trigger": "FontString:GetDebugName\t()",
			"contents": "${1:FontString}:GetDebugName()$0",
		},
		{
			"trigger": "FontString:GetDrawLayer\t()",
			"contents": "${1:FontString}:GetDrawLayer()$0",
		},
		{
			"trigger": "FontString:GetFieldSize\t()",
			"contents": "${1:FontString}:GetFieldSize()$0",
		},
		{
			"trigger": "FontString:GetFont\t()",
			"contents": "${1:FontString}:GetFont()$0",
		},
		{
			"trigger": "FontString:GetFontObject\t()",
			"contents": "${1:FontString}:GetFontObject()$0",
		},
		{
			"trigger": "FontString:GetHeight\t()",
			"contents": "${1:FontString}:GetHeight()$0",
		},
		{
			"trigger": "FontString:GetIndentedWordWrap\t()",
			"contents": "${1:FontString}:GetIndentedWordWrap()$0",
		},
		{
			"trigger": "FontString:GetJustifyH\t()",
			"contents": "${1:FontString}:GetJustifyH()$0",
		},
		{
			"trigger": "FontString:GetJustifyV\t()",
			"contents": "${1:FontString}:GetJustifyV()$0",
		},
		{
			"trigger": "FontString:GetLeft\t()",
			"contents": "${1:FontString}:GetLeft()$0",
		},
		{
			"trigger": "FontString:GetLineHeight\t()",
			"contents": "${1:FontString}:GetLineHeight()$0",
		},
		{
			"trigger": "FontString:GetMaxLines\t()",
			"contents": "${1:FontString}:GetMaxLines()$0",
		},
		{
			"trigger": "FontString:GetName\t()",
			"contents": "${1:FontString}:GetName()$0",
		},
		{
			"trigger": "FontString:GetNumLines\t()",
			"contents": "${1:FontString}:GetNumLines()$0",
		},
		{
			"trigger": "FontString:GetNumPoints\t()",
			"contents": "${1:FontString}:GetNumPoints()$0",
		},
		{
			"trigger": "FontString:GetObjectType\t()",
			"contents": "${1:FontString}:GetObjectType()$0",
		},
		{
			"trigger": "FontString:GetParent\t()",
			"contents": "${1:FontString}:GetParent()$0",
		},
		{
			"trigger": "FontString:GetPoint\t(index)",
			"contents": "${1:FontString}:GetPoint(${2:index})$0",
		},
		{
			"trigger": "FontString:GetRect\t()",
			"contents": "${1:FontString}:GetRect()$0",
		},
		{
			"trigger": "FontString:GetRight\t()",
			"contents": "${1:FontString}:GetRight()$0",
		},
		{
			"trigger": "FontString:GetShadowColor\t()",
			"contents": "${1:FontString}:GetShadowColor()$0",
		},
		{
			"trigger": "FontString:GetShadowOffset\t()",
			"contents": "${1:FontString}:GetShadowOffset()$0",
		},
		{
			"trigger": "FontString:GetSize\t()",
			"contents": "${1:FontString}:GetSize()$0",
		},
		{
			"trigger": "FontString:GetSpacing\t()",
			"contents": "${1:FontString}:GetSpacing()$0",
		},
		{
			"trigger": "FontString:GetStringHeight\t()",
			"contents": "${1:FontString}:GetStringHeight()$0",
		},
		{
			"trigger": "FontString:GetStringWidth\t()",
			"contents": "${1:FontString}:GetStringWidth()$0",
		},
		{
			"trigger": "FontString:GetText\t()",
			"contents": "${1:FontString}:GetText()$0",
		},
		{
			"trigger": "FontString:GetTextColor\t()",
			"contents": "${1:FontString}:GetTextColor()$0",
		},
		{
			"trigger": "FontString:GetTop\t()",
			"contents": "${1:FontString}:GetTop()$0",
		},
		{
			"trigger": "FontString:GetWidth\t()",
			"contents": "${1:FontString}:GetWidth()$0",
		},
		{
			"trigger": "FontString:GetWrappedWidth\t()",
			"contents": "${1:FontString}:GetWrappedWidth()$0",
		},
		{
			"trigger": "FontString:Hide\t()",
			"contents": "${1:FontString}:Hide()$0",
		},
		{
			"trigger": "FontString:IsDragging\t()",
			"contents": "${1:FontString}:IsDragging()$0",
		},
		{
			"trigger": "FontString:IsForbidden\t()",
			"contents": "${1:FontString}:IsForbidden()$0",
		},
		{
			"trigger": "FontString:IsIgnoringParentAlpha\t()",
			"contents": "${1:FontString}:IsIgnoringParentAlpha()$0",
		},
		{
			"trigger": "FontString:IsIgnoringParentScale\t()",
			"contents": "${1:FontString}:IsIgnoringParentScale()$0",
		},
		{
			"trigger": "FontString:IsMouseOver\t([topOffset], [leftOffset], [bottomOffset], [rightOffset])",
			"contents": "${1:FontString}:IsMouseOver(${2:[topOffset]}, ${3:[leftOffset]}, ${4:[bottomOffset]}, ${5:[rightOffset]})$0",
		},
		{
			"trigger": "FontString:IsObjectLoaded\t()",
			"contents": "${1:FontString}:IsObjectLoaded()$0",
		},
		{
			"trigger": "FontString:IsObjectType\t()",
			"contents": "${1:FontString}:IsObjectType()$0",
		},
		{
			"trigger": "FontString:IsProtected\t()",
			"contents": "${1:FontString}:IsProtected()$0",
		},
		{
			"trigger": "FontString:IsRectValid\t()",
			"contents": "${1:FontString}:IsRectValid()$0",
		},
		{
			"trigger": "FontString:IsShown\t()",
			"contents": "${1:FontString}:IsShown()$0",
		},
		{
			"trigger": "FontString:IsTruncated\t()",
			"contents": "${1:FontString}:IsTruncated()$0",
		},
		{
			"trigger": "FontString:IsVisible\t()",
			"contents": "${1:FontString}:IsVisible()$0",
		},
		{
			"trigger": "FontString:SetAllPoints\t([frame])",
			"contents": "${1:FontString}:SetAllPoints(${2:[frame]})$0",
		},
		{
			"trigger": "FontString:SetAlpha\t(alpha)",
			"contents": "${1:FontString}:SetAlpha(${2:alpha})$0",
		},
		{
			"trigger": "FontString:SetAlphaGradient\t(start, length)",
			"contents": "${1:FontString}:SetAlphaGradient(${2:start}, ${3:length})$0",
		},
		{
			"trigger": "FontString:SetDrawLayer\t(\"layer\", sublayer)",
			"contents": "${1:FontString}:SetDrawLayer(\"${2:layer}\", ${3:sublayer})$0",
		},
		{
			"trigger": "FontString:SetFont\t(\"filename\", fontHeight, \"flags\")",
			"contents": "${1:FontString}:SetFont(\"${2:filename}\", ${3:fontHeight}, \"${4:flags}\")$0",
		},
		{
			"trigger": "FontString:SetFontObject\t(font)",
			"contents": "${1:FontString}:SetFontObject(${2:font})$0",
		},
		{
			"trigger": "FontString:SetForbidden\t()",
			"contents": "${1:FontString}:SetForbidden()$0",
		},
		{
			"trigger": "FontString:SetFormattedText\t(\"formatString\", ...)",
			"contents": "${1:FontString}:SetFormattedText(\"${2:formatString}\", ${3:...})$0",
		},
		{
			"trigger": "FontString:SetHeight\t(height)",
			"contents": "${1:FontString}:SetHeight(${2:height})$0",
		},
		{
			"trigger": "FontString:SetIgnoreParentAlpha\t(enable)",
			"contents": "${1:FontString}:SetIgnoreParentAlpha(${2:enable})$0",
		},
		{
			"trigger": "FontString:SetIgnoreParentScale\t(enable)",
			"contents": "${1:FontString}:SetIgnoreParentScale(${2:enable})$0",
		},
		{
			"trigger": "FontString:SetIndentedWordWrap\t(enable)",
			"contents": "${1:FontString}:SetIndentedWordWrap(${2:enable})$0",
		},
		{
			"trigger": "FontString:SetJustifyH\t(\"justify\")",
			"contents": "${1:FontString}:SetJustifyH(\"${2:justify}\")$0",
		},
		{
			"trigger": "FontString:SetJustifyV\t(\"justify\")",
			"contents": "${1:FontString}:SetJustifyV(\"justify\")$0",
		},
		{
			"trigger": "FontString:SetMaxLines\t(lines)",
			"contents": "${1:FontString}:SetMaxLines(${2:lines})$0",
		},
		{
			"trigger": "FontString:SetNonSpaceWrap\t(enable)",
			"contents": "${1:FontString}:SetNonSpaceWrap(${2:enable})$0",
		},
		{
			"trigger": "FontString:SetParent\t(frame)",
			"contents": "${1:FontString}:SetParent(${2:frame})$0",
		},
		{
			"trigger": "FontString:SetPoint\t(\"point\", [relativeTo], [\"relativePoint\"], [xOffset], [yOffset])",
			"contents": "${1:FontString}:SetPoint(\"${2:point}\", ${3:[relativeTo]}, \"${4:[relativePoint]}\", ${5:[xOffset]}, ${6:[yOffset]})$0",
		},
		{
			"trigger": "FontString:SetShadowColor\t(shadowRed, shadowGreen, shadowBlue, shadowAlpha)",
			"contents": "${1:FontString}:SetShadowColor(${2:shadowRed}, ${3:shadowGreen}, ${4:shadowBlue}, ${5:shadowAlpha})$0",
		},
		{
			"trigger": "FontString:SetShadowOffset\t(xOffset, yOffset)",
			"contents": "${1:FontString}:SetShadowOffset(${2:xOffset}, ${3:yOffset})$0",
		},
		{
			"trigger": "FontString:SetShown\t(enable)",
			"contents": "${1:FontString}:SetShown(${2:enable})$0",
		},
		{
			"trigger": "FontString:SetSize\t(width, height)",
			"contents": "${1:FontString}:SetSize(${2:width}, ${3:height})$0",
		},
		{
			"trigger": "FontString:SetSpacing\t(spacing)",
			"contents": "${1:FontString}:SetSpacing(${2:spacing})$0",
		},
		{
			"trigger": "FontString:SetText\t(\"text\")",
			"contents": "${1:FontString}:SetText(\"${2:text}\")$0",
		},
		{
			"trigger": "FontString:SetTextColor\t(textRed, textGreen, textBlue, textAlpha)",
			"contents": "${1:FontString}:SetTextColor(${2:textRed}, ${3:textGreen}, ${4:textBlue}, ${5:textAlpha})$0",
		},
		{
			"trigger": "FontString:SetTextHeight\t(height)",
			"contents": "${1:FontString}:SetTextHeight(${2:height})$0",
		},
		{
			"trigger": "FontString:SetVertexColor\t(red, green, blue, [alpha])",
			"contents": "${1:FontString}:SetVertexColor(${2:red}, ${3:green}, ${4:blue}, ${5:[alpha]})$0",
		},
		{
			"trigger": "FontString:SetWidth\t(width)",
			"contents": "${1:FontString}:SetWidth(${2:width})$0",
		},
		{
			"trigger": "FontString:SetWordWrap\t(enable)",
			"contents": "${1:FontString}:SetWordWrap(${2:enable})$0",
		},
		{
			"trigger": "FontString:Show\t()",
			"contents": "${1:FontString}:Show()$0",
		},
		{
			"trigger": "FontString:StopAnimating\t()",
			"contents": "${1:FontString}:StopAnimating()$0",
		},




		{
			"trigger": "_FontString:CanChangeProtectedState\t()",
			"contents": "${1:canChange} = ${2:FontString}:CanChangeProtectedState()$0",
		},
		{
			"trigger": "_FontString:CanNonSpaceWrap\t()",
			"contents": "${1:enabled} = ${2:FontString}:CanNonSpaceWrap()$0",
		},
		{
			"trigger": "_FontString:CanWordWrap\t()",
			"contents": "${1:enabled} = ${2:FontString}:CanWordWrap()$0",
		},
		{
			"trigger": "_FontString:GetAlpha\t()",
			"contents": "${1:alpha} = ${2:FontString}:GetAlpha()$0",
		},
		{
			"trigger": "_FontString:GetAnimationGroups\t()",
			"contents": "${1:...} = ${2:FontString}:GetAnimationGroups()$0",
		},
		{
			"trigger": "_FontString:GetBottom\t()",
			"contents": "${1:bottom} = ${2:FontString}:GetBottom()$0",
		},
		{
			"trigger": "_FontString:GetCenter\t()",
			"contents": "${1:x}, ${2:y} = ${3:FontString}:GetCenter()$0",
		},
		{
			"trigger": "_FontString:GetDebugName\t()",
			"contents": "${1:name} = ${2:FontString}:GetDebugName()$0",
		},
		{
			"trigger": "_FontString:GetDrawLayer\t()",
			"contents": "${1:layer}, ${2:sublayer} = ${3:FontString}:GetDrawLayer()$0",
		},
		{
			"trigger": "_FontString:GetFieldSize\t()",
			"contents": "${1:size} = ${2:FontString}:GetFieldSize()$0",
		},
		{
			"trigger": "_FontString:GetFont\t()",
			"contents": "${1:filename}, ${2:fontHeight}, ${3:flags} = ${4:FontString}:GetFont()$0",
		},
		{
			"trigger": "_FontString:GetFontObject\t()",
			"contents": "${1:font} = ${2:FontString}:GetFontObject()$0",
		},
		{
			"trigger": "_FontString:GetHeight\t()",
			"contents": "${1:height} = ${2:FontString}:GetHeight()$0",
		},
		{
			"trigger": "_FontString:GetIndentedWordWrap\t()",
			"contents": "${1:indent} = ${2:FontString}:GetIndentedWordWrap()$0",
		},
		{
			"trigger": "_FontString:GetJustifyH\t()",
			"contents": "${1:justify} = ${2:FontString}:GetJustifyH()$0",
		},
		{
			"trigger": "_FontString:GetJustifyV\t()",
			"contents": "${1:justify} = ${2:FontString}:GetJustifyV()$0",
		},
		{
			"trigger": "_FontString:GetLeft\t()",
			"contents": "${1:left} = ${2:FontString}:GetLeft()$0",
		},
		{
			"trigger": "_FontString:GetLineHeight\t()",
			"contents": "${1:height} = ${2:FontString}:GetLineHeight()$0",
		},
		{
			"trigger": "_FontString:GetMaxLines\t()",
			"contents": "${1:maxLines} = ${2:FontString}:GetMaxLines()$0",
		},
		{
			"trigger": "_FontString:GetName\t()",
			"contents": "${1:name} = ${2:FontString}:GetName()$0",
		},
		{
			"trigger": "_FontString:GetNumLines\t()",
			"contents": "${1:numLines} = ${2:FontString}:GetNumLines()$0",
		},
		{
			"trigger": "_FontString:GetNumPoints\t()",
			"contents": "${1:numPoints} = ${2:FontString}:GetNumPoints()$0",
		},
		{
			"trigger": "_FontString:GetObjectType\t()",
			"contents": "${1:type} = ${2:FontString}:GetObjectType()$0",
		},
		{
			"trigger": "_FontString:GetPoint\t(index)",
			"contents": "${1:point}, ${2:relativeTo}, ${3:relativePoint}, ${4:xOffset}, ${5:yOffset} = ${6:FontString}:GetPoint(${7:index})$0",
		},
		{
			"trigger": "_FontString:GetRect\t()",
			"contents": "${1:left}, ${2:bottom}, ${3:width}, ${4:height} = ${5:FontString}:GetRect()$0",
		},
		{
			"trigger": "_FontString:GetRight\t()",
			"contents": "${1:right} = ${2:FontString}:GetRight()$0",
		},
		{
			"trigger": "_FontString:GetShadowColor\t()",
			"contents": "${1:shadowR}, ${2:shadowG}, ${3:shadowB}, ${4:shadowAlpha} = ${5:FontString}:GetShadowColor()$0",
		},
		{
			"trigger": "_FontString:GetShadowOffset\t()",
			"contents": "${1:xOffset}, ${2:yOffset} = ${3:FontString}:GetShadowOffset()$0",
		},
		{
			"trigger": "_FontString:GetStringHeight\t()",
			"contents": "${1:height} = ${2:FontString}:GetStringHeight()$0",
		},
		{
			"trigger": "_FontString:GetStringWidth\t()",
			"contents": "${1:width} = ${2:FontString}:GetStringWidth()$0",
		},
		{
			"trigger": "_FontString:GetSize\t()",
			"contents": "${1:width}, ${2:height} = ${3:FontString}:GetSize()$0",
		},
		{
			"trigger": "_FontString:GetSpacing\t()",
			"contents": "${1:spacing} = ${2:FontString}:GetSpacing()$0",
		},
		{
			"trigger": "_FontString:GetText\t()",
			"contents": "${1:text} = ${2:FontString}:GetText()$0",
		},
		{
			"trigger": "_FontString:GetTextColor\t()",
			"contents": "${1:textR}, ${2:textG}, ${3:textB}, ${4:textAlpha} = ${5:FontString}:GetTextColor()$0",
		},
		{
			"trigger": "_FontString:GetTop\t()",
			"contents": "${1:top} = ${2:FontString}:GetTop()$0",
		},
		{
			"trigger": "_FontString:GetWidth\t()",
			"contents": "${1:width} = ${2:FontString}:GetWidth()$0",
		},
		{
			"trigger": "_FontString:GetWrappedWidth\t()",
			"contents": "${1:width} = ${2:FontString}:GetWrappedWidth()$0",
		},
		{
			"trigger": "_FontString:IsDragging\t()",
			"contents": "${1:isDragging} = ${2:FontString}:IsDragging()$0",
		},
		{
			"trigger": "_FontString:IsForbidden\t()",
			"contents": "${1:isForbidden} = ${2:FontString}:IsForbidden()$0",
		},
		{
			"trigger": "_FontString:IsIgnoringParentAlpha\t()",
			"contents": "${1:isIgnoring} = ${2:FontString}:IsIgnoringParentAlpha()$0",
		},
		{
			"trigger": "_FontString:IsIgnoringParentScale\t()",
			"contents": "${1:isIgnoring} = ${2:FontString}:IsIgnoringParentScale()$0",
		},
		{
			"trigger": "_FontString:IsMouseOver\t([topOffset], [leftOffset], [bottomOffset], [rightOffset])",
			"contents": "${1:isOver} = ${2:FontString}:IsMouseOver(${3:[topOffset]}, ${4:[leftOffset]}, ${5:[bottomOffset]}, ${6:[rightOffset]})$0",
		},
		{
			"trigger": "_FontString:IsObjectLoaded\t()",
			"contents": "${1:loaded} = ${2:FontString}:IsObjectLoaded()$0",
		},
		{
			"trigger": "_FontString:IsObjectType\t(\"type\")",
			"contents": "${1:isType} = ${2:FontString}:IsObjectType(\"${3:type}\")$0",
		},
		{
			"trigger": "_FontString:IsProtected\t()",
			"contents": "${1:isProtected}, ${2:explicit} = ${3:FontString}:IsProtected()$0",
		},
		{
			"trigger": "_FontString:IsRectValid\t()",
			"contents": "${1:isValid} = ${2:FontString}:IsRectValid()$0",
		},
		{
			"trigger": "_FontString:IsShown\t()",
			"contents": "${1:shown} = ${2:FontString}:IsShown()$0",
		},
		{
			"trigger": "_FontString:IsVisible\t()",
			"contents": "${1:visible} = ${2:FontString}:IsVisible()$0",
		},
		{
			"trigger": "_FontString:SetFont\t(\"filename\", fontHeight, \"flags\")",
			"contents": "${1:isValid} = ${2:FontString}:SetFont(\"${3:filename}\", ${4:fontHeight}, \"${5:flags}\")$0",
		},




		{
			"trigger": "_FontString\thelp",
			"contents": "FontString = {\n\tinherits = {\n\t\t\"FontString\",\n\t\t\"FontInstance\",\n\t\t\"LayeredRegion\",\n\t\t\"VisibleRegion\",\n\t\t\"Region\",\n\t\t\"ParentedObject\",\n\t\t\"UIObject\",\n\t},\n\tmethods = {\n\t\t\"CanChangeProtectedState\", -- Returns whether protected properties of the region can be changed by non-secure scripts\n\t\t\"CanNonSpaceWrap\", -- Returns whether long lines of text will wrap within or between words\n\t\t\"CanWordWrap\", -- Returns whether long lines of text in the font string can wrap onto\n\t\t\"ClearAllPoints\", -- Removes all anchor points from the region\n\t\t\"CreateAnimationGroup\", -- Creates a new animation group as a child of the region\n\t\t\"GetAlpha\", -- Returns the opacity of the region relative to it's parent\n\t\t\"GetAnimationGroups\", -- Returns a list of animation groups belonging to the region\n\t\t\"GetBottom\", -- Returns the distance from the bottom of the screen to the bottom of the region\n\t\t\"GetCenter\", -- Returns the screen coordinates of the region's center\n\t\t\"GetDebugName\", -- Returns the widget object's debug name\n\t\t\"GetDrawLayer\", -- Returns the layer at which the region's graphics are drawn relative to others in it's frame\n\t\t\"GetFieldSize\", -- Returns the font instance's field size\n\t\t\"GetFont\", -- Returns the font instance's basic font properties\n\t\t\"GetFontObject\", -- Returns the font object from which the font instance's properties are inherited\n\t\t\"GetHeight\", -- Returns the height of the region\n\t\t\"GetIndentedWordWrap\", -- Returns whether long lines of text are indented when wrapping\n\t\t\"GetJustifyH\", -- Returns the font instance's horizontal text alignment style\n\t\t\"GetJustifyV\", -- Returns the font instance's vertical text alignment style\n\t\t\"GetLeft\", -- Returns the distance from the left edge of the screen to the left edge of the region\n\t\t\"GetLineHeight\", -- Returns the height of the text displayed in the font string\n\t\t\"GetMaxLines\", -- Returns the maximum lines of the text displayed in the font string\n\t\t\"GetName\", -- Returns the widget object's name\n\t\t\"GetNumLines\", -- Returns the currently displayed lines of the text in the font string\n\t\t\"GetNumPoints\", -- Returns the number of anchor points defined for the region\n\t\t\"GetObjectType\", -- Returns the object's widget type\n\t\t\"GetParent\", -- Returns the object's parent object\n\t\t\"GetPoint\", -- Returns information about one of the region's anchor points\n\t\t\"GetRect\", -- Returns the position and dimensions of the region\n\t\t\"GetRight\", -- Returns the distance from the left edge of the screen to the right edge of the region\n\t\t\"GetShadowColor\", -- Returns the color of the font's text shadow\n\t\t\"GetShadowOffset\", -- Returns the offset of the font instance's text shadow from it's text\n\t\t\"GetSize\", -- Returns the width and height of the region\n\t\t\"GetSpacing\", -- Returns the font instance's amount of spacing between lines\n\t\t\"GetStringHeight\", -- Returns the height of the text displayed in the font string\n\t\t\"GetStringWidth\", -- Returns the width of the text displayed in the font string\n\t\t\"GetText\", -- Returns the text currently set for display in the font string\n\t\t\"GetTextColor\", -- Returns the font instance's default text color\n\t\t\"GetTop\", -- Returns the distance from the bottom of the screen to the top of the region\n\t\t\"GetWidth\", -- Returns the width of the region\n\t\t\"GetWrappedWidth\", -- Returns the wrapped width of the font string\n\t\t\"Hide\", -- Hides the region\n\t\t\"IsDragging\", -- Returns whether the region is currently being dragged\n\t\t\"IsForbidden\", -- Returns if this widget's methods may only be called from secure execution paths\n\t\t\"IsIgnoringParentAlpha\", -- Returns if the region is ignoring it's parent alpha changes\n\t\t\"IsIgnoringParentScale\", -- Returns if the region is ignoring it's parent scale changes\n\t\t\"IsMouseOver\", -- Returns whether the mouse cursor is over the given region\n\t\t\"IsObjectLoaded\", -- Returns whether the object is loaded\n\t\t\"IsObjectType\", -- Returns whether the object belongs to a given widget type\n\t\t\"IsProtected\", -- Returns whether the region is protected\n\t\t\"IsRectValid\", -- Returns whether the region's rect size is valid\n\t\t\"IsShown\", -- Returns whether the region is shown\n\t\t\"IsTruncated\",  -- Returns if the text is truncated\n\t\t\"IsVisible\", -- Returns whether the region is visible\n\t\t\"SetAllPoints\", -- Sets all anchor points of the region to match those of another region\n\t\t\"SetAlpha\", -- Sets the opacity of the region relative to it's parent\n\t\t\"SetAlphaGradient\", -- Creates an opacity gradient over the text in the font string and returns true on success\n\t\t\"SetDrawLayer\", -- Sets the layer at which the region's graphics are drawn relative to others in it's frame\n\t\t\"SetFont\", -- Sets the font instance's basic font properties\n\t\t\"SetFontObject\", -- Sets the font object from which the font instance's properties are inherited\n\t\t\"SetForbidden\", -- Sets whether the modification of the object's secure methods are forbidden while in combat\n\t\t\"SetFormattedText\", -- Sets the text displayed in the font string using format specifiers\n\t\t\"SetHeight\", -- Sets the region's height\n\t\t\"SetIgnoreParentAlpha\", -- Sets if the region should ignore it's parent alpha changes\n\t\t\"SetIgnoreParentScale\", -- Sets if the region should ignore it's parent scale changes\n\t\t\"SetIndentedWordWrap\", -- Sets whether long lines of text are indented when wrapping\n\t\t\"SetJustifyH\", -- Sets the font instance's horizontal text alignment style\n\t\t\"SetJustifyV\", -- Sets the font instance's vertical text alignment style\n\t\t\"SetMaxLines\", -- Sets the maximum lines of the text displayed in the font string\n\t\t\"SetNonSpaceWrap\", -- Sets whether long lines of text will wrap within or between words\n\t\t\"SetParent\", -- Sets another frame the parent of this region\n\t\t\"SetPoint\", -- Sets an anchor point for the region\n\t\t\"SetShadowColor\", -- Sets the color of the font's text shadow\n\t\t\"SetShadowOffset\", -- Sets the offset of the font instance's text shadow from it's text\n\t\t\"SetShown\", -- Sets whether the region should be visible or hidden\n\t\t\"SetSize\", -- Sets the size of the region to the specified values\n\t\t\"SetSpacing\", -- Sets the font instance's amount of spacing between lines\n\t\t\"SetText\", -- Sets the text to be displayed in the font string\n\t\t\"SetTextColor\", -- Sets the font instance's default text color\n\t\t\"SetTextHeight\", -- Scales the font string's rendered text to a different height\n\t\t\"SetVertexColor\", -- Sets a color shading for the region's graphics\n\t\t\"SetWidth\", -- Sets the region's width\n\t\t\"SetWordWrap\", -- Sets whether long lines of text in the font string can wrap onto subsequent lines\n\t\t\"Show\", -- Shows the region\n\t\t\"StopAnimating\", -- Stops any active animations involving the region or it's children\n\t},\n}",
		},
	]
}
