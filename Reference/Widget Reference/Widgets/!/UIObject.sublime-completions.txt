{
	"scope": "source.lua - entity - punctuation - keyword - string - meta.function.arguments.lua - meta.punctuation.lua - meta.method-call.lua",
	"completions": [
		{
			"trigger": "UIObject:GetDebugName\t()",
			"contents": "${1:UIObject}:GetDebugName()$0",
		},
		{
			"trigger": "UIObject:GetName\t()",
			"contents": "${1:UIObject}:GetName()$0",
		},
		{
			"trigger": "UIObject:GetObjectType\t()",
			"contents": "${1:UIObject}:GetObjectType()$0",
		},
		{
			"trigger": "UIObject:IsForbidden\t()",
			"contents": "${1:UIObject}:IsForbidden()$0",
		},
		{
			"trigger": "UIObject:IsObjectLoaded\t()",
			"contents": "${1:UIObject}:IsObjectLoaded()$0",
		},
		{
			"trigger": "UIObject:IsObjectType\t()",
			"contents": "${1:UIObject}:IsObjectType()$0",
		},




		{
			"trigger": "_UIObject:GetDebugName\t()",
			"contents": "${1:name} = ${2:UIObject}:GetDebugName()$0",
		},
		{
			"trigger": "_UIObject:GetName\t()",
			"contents": "${1:name} = ${2:UIObject}:GetName()$0",
		},
		{
			"trigger": "_UIObject:GetObjectType\t()",
			"contents": "${1:type} = ${2:UIObject}:GetObjectType()$0",
		},
		{
			"trigger": "_UIObject:IsForbidden\t()",
			"contents": "${1:isForbidden} = ${2:UIObject}:IsForbidden()$0",
		},
		{
			"trigger": "_UIObject:IsObjectLoaded\t()",
			"contents": "${1:isLoaded} = ${2:UIObject}:IsObjectLoaded()$0",
		},
		{
			"trigger": "_UIObject:IsObjectType\t(\"type\")",
			"contents": "${1:isType} = ${2:UIObject}:IsObjectType(\"${3:type}\")$0",
		},




		{
			"trigger": "_UIObject\thelp",
			"contents": "UIObject = {\n\tinherits = {\n\t\t\"UIObject\",\n\t},\n\tmethods = {\n\t\t\"GetDebugName\", -- Returns the widget object's debug name\n\t\t\"GetName\", -- Returns the widget object's name\n\t\t\"GetObjectType\", -- Returns the object's widget type\n\t\t\"IsForbidden\", -- Returns if this widget's methods may only be called from secure execution paths\n\t\t\"IsObjectLoaded\", -- Returns whether the object is loaded\n\t\t\"IsObjectType\", -- Returns whether the object belongs to a given widget type\n\t},\n}",
		},
	]
}
