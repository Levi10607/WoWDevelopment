{
	"scope": "source.lua - entity - punctuation - keyword - string",
	"completions": [
		{
			"trigger": "ColorSelect:CanChangeAttribute\t()",
			"contents": "${1:ColorSelect}:CanChangeAttribute()$0",
		},
		{
			"trigger": "ColorSelect:CanChangeProtectedState\t()",
			"contents": "${1:ColorSelect}:CanChangeProtectedState()$0",
		},
		{
			"trigger": "ColorSelect:ClearAllPoints\t()",
			"contents": "${1:ColorSelect}:ClearAllPoints()$0",
		},
		{
			"trigger": "ColorSelect:CreateAnimationGroup\t([\"name\"], [\"inheritsFrom\"])",
			"contents": "${1:ColorSelect}:CreateAnimationGroup(${2:[\"name\"]}, ${3:[\"inheritsFrom\"]})$0",
		},
		{
			"trigger": "ColorSelect:CreateFontString\t([\"name\"], [\"layer\"], [\"inherits\"])",
			"contents": "${1:ColorSelect}:CreateFontString(${2:[\"name\"]}, ${3:[\"layer\"]}, ${4:[\"inherits\"]})$0",
		},
		{
			"trigger": "ColorSelect:CreateLine\t([\"name\"], [\"layer\"], [\"inherits\"], [sublevel])",
			"contents": "${1:ColorSelect}:CreateLine(${2:[\"name\"]}, ${3:[\"layer\"]}, ${4:[\"inherits\"]}, ${5:[sublevel]})$0",
		},
		{
			"trigger": "ColorSelect:CreateMaskTexture\t([\"name\"], [\"layer\"], [\"inherits\"], [sublevel])",
			"contents": "${1:ColorSelect}:CreateMaskTexture(${2:[\"name\"]}, ${3:[\"layer\"]}, ${4:[\"inherits\"]}, ${5:[sublevel]})$0",
		},
		{
			"trigger": "ColorSelect:CreateTexture\t([\"name\"], [\"layer\"], [\"inherits\"], [sublevel])",
			"contents": "${1:ColorSelect}:CreateTexture(${2:[\"name\"]}, ${3:[\"layer\"]}, ${4:[\"inherits\"]}, ${5:[sublevel]})$0",
		},
		{
			"trigger": "ColorSelect:DisableDrawLayer\t(\"layer\")",
			"contents": "${1:ColorSelect}:DisableDrawLayer(\"${2:layer}\")$0",
		},
		{
			"trigger": "ColorSelect:DoesClipChildren\t()",
			"contents": "${1:ColorSelect}:DoesClipChildren()$0",
		},
		{
			"trigger": "ColorSelect:EnableDrawLayer\t(\"layer\")",
			"contents": "${1:ColorSelect}:EnableDrawLayer(\"${2:layer}\")$0",
		},
		{
			"trigger": "ColorSelect:EnableJoystick\t(enable)",
			"contents": "${1:ColorSelect}:EnableJoystick(${2:enable})$0",
		},
		{
			"trigger": "ColorSelect:EnableKeyboard\t(enable)",
			"contents": "${1:ColorSelect}:EnableKeyboard(${2:enable})$0",
		},
		{
			"trigger": "ColorSelect:EnableMouse\t(enable)",
			"contents": "${1:ColorSelect}:EnableMouse(${2:enable})$0",
		},
		{
			"trigger": "ColorSelect:EnableMouseWheel\t(enable)",
			"contents": "${1:ColorSelect}:EnableMouseWheel(${2:enable})$0",
		},
		{
			"trigger": "ColorSelect:GetAlpha\t()",
			"contents": "${1:ColorSelect}:GetAlpha()$0",
		},
		{
			"trigger": "ColorSelect:GetAnimationGroups\t()",
			"contents": "${1:ColorSelect}:GetAnimationGroups()$0",
		},
		{
			"trigger": "ColorSelect:GetAttribute\t(\"name\")",
			"contents": "${1:ColorSelect}:GetAttribute(${2:\"name\"})$0",
		},
		{
			"trigger": "ColorSelect:GetBackdrop\t()",
			"contents": "${1:ColorSelect}:GetBackdrop()$0",
		},
		{
			"trigger": "ColorSelect:GetBackdropBorderColor\t()",
			"contents": "${1:ColorSelect}:GetBackdropBorderColor()$0",
		},
		{
			"trigger": "ColorSelect:GetBackdropColor\t()",
			"contents": "${1:ColorSelect}:GetBackdropColor()$0",
		},
		{
			"trigger": "ColorSelect:GetBottom\t()",
			"contents": "${1:ColorSelect}:GetBottom()$0",
		},
		{
			"trigger": "ColorSelect:GetBoundsRect\t()",
			"contents": "${1:ColorSelect}:GetBoundsRect()$0",
		},
		{
			"trigger": "ColorSelect:GetCenter\t()",
			"contents": "${1:ColorSelect}:GetCenter()$0",
		},
		{
			"trigger": "ColorSelect:GetChildren\t()",
			"contents": "${1:ColorSelect}:GetChildren()$0",
		},
		{
			"trigger": "ColorSelect:GetClampRectInsets\t()",
			"contents": "${1:ColorSelect}:GetClampRectInsets()$0",
		},
		{
			"trigger": "ColorSelect:GetColorHSV\t()",
			"contents": "${1:ColorSelect}:GetColorHSV()$0",
		},
		{
			"trigger": "ColorSelect:GetColorRGB\t()",
			"contents": "${1:ColorSelect}:GetColorRGB()$0",
		},
		{
			"trigger": "ColorSelect:GetColorValueTexture\t()",
			"contents": "${1:ColorSelect}:GetColorValueTexture()$0",
		},
		{
			"trigger": "ColorSelect:GetColorValueThumbTexture\t()",
			"contents": "${1:ColorSelect}:GetColorValueThumbTexture()$0",
		},
		{
			"trigger": "ColorSelect:GetColorWheelTexture\t()",
			"contents": "${1:ColorSelect}:GetColorWheelTexture()$0",
		},
		{
			"trigger": "ColorSelect:GetColorWheelThumbTexture\t()",
			"contents": "${1:ColorSelect}:GetColorWheelThumbTexture()$0",
		},
		{
			"trigger": "ColorSelect:GetDebugName\t()",
			"contents": "${1:ColorSelect}:GetDebugName()$0",
		},
		{
			"trigger": "ColorSelect:GetDepth\t()",
			"contents": "${1:ColorSelect}:GetDepth()$0",
		},
		{
			"trigger": "ColorSelect:GetDontSavePosition\t()",
			"contents": "${1:ColorSelect}:GetDontSavePosition()$0",
		},
		{
			"trigger": "ColorSelect:GetEffectiveAlpha\t()",
			"contents": "${1:ColorSelect}:GetEffectiveAlpha()$0",
		},
		{
			"trigger": "ColorSelect:GetEffectiveDepth\t()",
			"contents": "${1:ColorSelect}:GetEffectiveDepth()$0",
		},
		{
			"trigger": "ColorSelect:GetEffectivelyFlattensRenderLayers\t()",
			"contents": "${1:ColorSelect}:GetEffectivelyFlattensRenderLayers()$0",
		},
		{
			"trigger": "ColorSelect:GetEffectiveScale\t()",
			"contents": "${1:ColorSelect}:GetEffectiveScale()$0",
		},
		{
			"trigger": "ColorSelect:GetFlattensRenderLayers\t()",
			"contents": "${1:ColorSelect}:GetFlattensRenderLayers()$0",
		},
		{
			"trigger": "ColorSelect:GetFrameLevel\t()",
			"contents": "${1:ColorSelect}:GetFrameLevel()$0",
		},
		{
			"trigger": "ColorSelect:GetFrameStrata\t()",
			"contents": "${1:ColorSelect}:GetFrameStrata()$0",
		},
		{
			"trigger": "ColorSelect:GetHeight\t()",
			"contents": "${1:ColorSelect}:GetHeight()$0",
		},
		{
			"trigger": "ColorSelect:GetHitRectInsets\t()",
			"contents": "${1:ColorSelect}:GetHitRectInsets()$0",
		},
		{
			"trigger": "ColorSelect:GetHyperlinksEnabled\t()",
			"contents": "${1:ColorSelect}:GetHyperlinksEnabled()$0",
		},
		{
			"trigger": "ColorSelect:GetID\t()",
			"contents": "${1:ColorSelect}:GetID()$0",
		},
		{
			"trigger": "ColorSelect:GetLeft\t()",
			"contents": "${1:ColorSelect}:GetLeft()$0",
		},
		{
			"trigger": "ColorSelect:GetMaxResize\t()",
			"contents": "${1:ColorSelect}:GetMaxResize()$0",
		},
		{
			"trigger": "ColorSelect:GetMinResize\t()",
			"contents": "${1:ColorSelect}:GetMinResize()$0",
		},
		{
			"trigger": "ColorSelect:GetName\t()",
			"contents": "${1:ColorSelect}:GetName()$0",
		},
		{
			"trigger": "ColorSelect:GetNumChildren\t()",
			"contents": "${1:ColorSelect}:GetNumChildren()$0",
		},
		{
			"trigger": "ColorSelect:GetNumPoints\t()",
			"contents": "${1:ColorSelect}:GetNumPoints()$0",
		},
		{
			"trigger": "ColorSelect:GetNumRegions\t()",
			"contents": "${1:ColorSelect}:GetNumRegions()$0",
		},
		{
			"trigger": "ColorSelect:GetObjectType\t()",
			"contents": "${1:ColorSelect}:GetObjectType()$0",
		},
		{
			"trigger": "ColorSelect:GetParent\t()",
			"contents": "${1:ColorSelect}:GetParent()$0",
		},
		{
			"trigger": "ColorSelect:GetPoint\t(index)",
			"contents": "${1:ColorSelect}:GetPoint(${2:index})$0",
		},
		{
			"trigger": "ColorSelect:GetPropagateKeyboardInput\t()",
			"contents": "${1:ColorSelect}:GetPropagateKeyboardInput()$0",
		},
		{
			"trigger": "ColorSelect:GetRect\t()",
			"contents": "${1:ColorSelect}:GetRect()$0",
		},
		{
			"trigger": "ColorSelect:GetRegions\t()",
			"contents": "${1:ColorSelect}:GetRegions()$0",
		},
		{
			"trigger": "ColorSelect:GetRight\t()",
			"contents": "${1:ColorSelect}:GetRight()$0",
		},
		{
			"trigger": "ColorSelect:GetScale\t()",
			"contents": "${1:ColorSelect}:GetScale()$0",
		},
		{
			"trigger": "ColorSelect:GetScript\t(\"scriptType\")",
			"contents": "${1:ColorSelect}:GetScript(\"${2:scriptType}\")$0",
		},
		{
			"trigger": "ColorSelect:GetSize\t()",
			"contents": "${1:ColorSelect}:GetSize()$0",
		},
		{
			"trigger": "ColorSelect:GetTop\t()",
			"contents": "${1:ColorSelect}:GetTop()$0",
		},
		{
			"trigger": "ColorSelect:GetWidth\t()",
			"contents": "${1:ColorSelect}:GetWidth()$0",
		},
		{
			"trigger": "ColorSelect:HasScript\t(\"scriptType\")",
			"contents": "${1:ColorSelect}:HasScript(\"${2:scriptType}\")$0",
		},
		{
			"trigger": "ColorSelect:Hide\t()",
			"contents": "${1:ColorSelect}:Hide()$0",
		},
		{
			"trigger": "ColorSelect:HookScript\t(\"scriptType\", handler)",
			"contents": "${1:ColorSelect}:HookScript(\"${2:scriptType}\", ${3:handler})$0",
		},
		{
			"trigger": "ColorSelect:IgnoreDepth\t(enable)",
			"contents": "${1:ColorSelect}:IgnoreDepth(${2:enable})$0",
		},
		{
			"trigger": "ColorSelect:IsClampedToScreen\t()",
			"contents": "${1:ColorSelect}:IsClampedToScreen()$0",
		},
		{
			"trigger": "ColorSelect:IsDragging\t()",
			"contents": "${1:ColorSelect}:IsDragging()$0",
		},
		{
			"trigger": "ColorSelect:IsEventRegistered\t(\"event\")",
			"contents": "${1:ColorSelect}:IsEventRegistered(\"${2:event}\")$0",
		},
		{
			"trigger": "ColorSelect:IsForbidden\t()",
			"contents": "${1:ColorSelect}:IsForbidden()$0",
		},
		{
			"trigger": "ColorSelect:IsIgnoringDepth\t()",
			"contents": "${1:ColorSelect}:IsIgnoringDepth()$0",
		},
		{
			"trigger": "ColorSelect:IsIgnoringParentAlpha\t()",
			"contents": "${1:ColorSelect}:IsIgnoringParentAlpha()$0",
		},
		{
			"trigger": "ColorSelect:IsIgnoringParentScale\t()",
			"contents": "${1:ColorSelect}:IsIgnoringParentScale()$0",
		},
		{
			"trigger": "ColorSelect:IsJoystickEnabled\t()",
			"contents": "${1:ColorSelect}:IsJoystickEnabled()$0",
		},
		{
			"trigger": "ColorSelect:IsKeyboardEnabled\t()",
			"contents": "${1:ColorSelect}:IsKeyboardEnabled()$0",
		},
		{
			"trigger": "ColorSelect:IsMouseClickEnabled\t()",
			"contents": "${1:ColorSelect}:IsMouseClickEnabled()$0",
		},
		{
			"trigger": "ColorSelect:IsMouseEnabled\t()",
			"contents": "${1:ColorSelect}:IsMouseEnabled()$0",
		},
		{
			"trigger": "ColorSelect:IsMouseMotionEnabled\t()",
			"contents": "${1:ColorSelect}:IsMouseMotionEnabled()$0",
		},
		{
			"trigger": "ColorSelect:IsMouseOver\t([topOffset], [leftOffset], [bottomOffset], [rightOffset])",
			"contents": "${1:ColorSelect}:IsMouseOver(${2:[topOffset]}, ${3:[leftOffset]}, ${4:[bottomOffset]}, ${5:[rightOffset]})$0",
		},
		{
			"trigger": "ColorSelect:IsMouseWheelEnabled\t()",
			"contents": "${1:ColorSelect}:IsMouseWheelEnabled()$0",
		},
		{
			"trigger": "ColorSelect:IsMovable\t()",
			"contents": "${1:ColorSelect}:IsMovable()$0",
		},
		{
			"trigger": "ColorSelect:IsObjectLoaded\t()",
			"contents": "${1:ColorSelect}:IsObjectLoaded()$0",
		},
		{
			"trigger": "ColorSelect:IsObjectType\t()",
			"contents": "${1:ColorSelect}:IsObjectType()$0",
		},
		{
			"trigger": "ColorSelect:IsProtected\t()",
			"contents": "${1:ColorSelect}:IsProtected()$0",
		},
		{
			"trigger": "ColorSelect:IsRectValid\t()",
			"contents": "${1:ColorSelect}:IsRectValid()$0",
		},
		{
			"trigger": "ColorSelect:IsResizable\t()",
			"contents": "${1:ColorSelect}:IsResizable()$0",
		},
		{
			"trigger": "ColorSelect:IsShown\t()",
			"contents": "${1:ColorSelect}:IsShown()$0",
		},
		{
			"trigger": "ColorSelect:IsToplevel\t()",
			"contents": "${1:ColorSelect}:IsToplevel()$0",
		},
		{
			"trigger": "ColorSelect:IsUserPlaced\t()",
			"contents": "${1:ColorSelect}:IsUserPlaced()$0",
		},
		{
			"trigger": "ColorSelect:IsVisible\t()",
			"contents": "${1:ColorSelect}:IsVisible()$0",
		},
		{
			"trigger": "ColorSelect:Lower\t()",
			"contents": "${1:ColorSelect}:Lower()$0",
		},
		{
			"trigger": "ColorSelect:Raise\t()",
			"contents": "${1:ColorSelect}:Raise()$0",
		},
		{
			"trigger": "ColorSelect:RegisterAllEvents\t()",
			"contents": "${1:ColorSelect}:RegisterAllEvents()$0",
		},
		{
			"trigger": "ColorSelect:RegisterEvent\t(\"event\")",
			"contents": "${1:ColorSelect}:RegisterEvent(\"${2:event}\")$0",
		},
		{
			"trigger": "ColorSelect:RegisterForDrag\t(...)",
			"contents": "${1:ColorSelect}:RegisterForDrag(${2:...})$0",
		},
		{
			"trigger": "ColorSelect:RegisterUnitEvent\t(\"event\", \"unit1\", \"unit2\")",
			"contents": "${1:ColorSelect}:RegisterUnitEvent(\"${2:event}\", \"${3:unit1}\", \"${4:unit2}\")$0",
		},
		{
			"trigger": "ColorSelect:SetAllPoints\t([frame])",
			"contents": "${1:ColorSelect}:SetAllPoints(${2:[frame]})$0",
		},
		{
			"trigger": "ColorSelect:SetAlpha\t(alpha)",
			"contents": "${1:ColorSelect}:SetAlpha(${2:alpha})$0",
		},
		{
			"trigger": "ColorSelect:SetAttribute\t(\"name\", value)",
			"contents": "${1:ColorSelect}:SetAttribute(${2:\"name\"}, ${3:value})$0",
		},
		{
			"trigger": "ColorSelect:SetBackdrop\t(backdrop)",
			"contents": "${1:ColorSelect}:SetBackdrop(${2:backdrop})$0",
		},
		{
			"trigger": "ColorSelect:SetBackdropBorderColor\t(red, green, blue, [alpha])",
			"contents": "${1:ColorSelect}:SetBackdropBorderColor(${2:red}, ${3:green}, ${4:blue}, ${5:[alpha]})$0",
		},
		{
			"trigger": "ColorSelect:SetBackdropColor\t(red, green, blue, [alpha])",
			"contents": "${1:ColorSelect}:SetBackdropColor(${2:red}, ${3:green}, ${4:blue}, ${5:[alpha]})$0",
		},
		{
			"trigger": "ColorSelect:SetClampedToScreen\t(enable)",
			"contents": "${1:ColorSelect}:SetClampedToScreen(${2:enable})$0",
		},
		{
			"trigger": "ColorSelect:SetClampRectInsets\t(left, right, top, bottom)",
			"contents": "${1:ColorSelect}:SetClampRectInsets(${2:left}, ${3:right}, ${4:top}, ${5:bottom})$0",
		},
		{
			"trigger": "ColorSelect:SetClipsChildren\t(enable)",
			"contents": "${1:ColorSelect}:SetClipsChildren(${2:enable})$0",
		},
		{
			"trigger": "ColorSelect:SetColorHSV\t(hue, saturation, value)",
			"contents": "${1:ColorSelect}:SetColorHSV(${2:hue}, ${3:saturation}, ${4:value})$0",
		},
		{
			"trigger": "ColorSelect:SetColorRGB\t(red, blue, green)",
			"contents": "${1:ColorSelect}:SetColorHSV(${2:red}, ${3:blue}, ${4:green})$0",
		},
		{
			"trigger": "ColorSelect:SetColorValueTexture\t(texture)",
			"contents": "${1:ColorSelect}:SetColorValueTexture(${2:texture})$0",
		},
		{
			"trigger": "ColorSelect:SetColorValueThumbTexture\t(texture)",
			"contents": "${1:ColorSelect}:SetColorValueThumbTexture(${2:texture})$0",
		},
		{
			"trigger": "ColorSelect:SetColorValueThumbTexture\t(\"fileName\")",
			"contents": "${1:ColorSelect}:SetColorValueThumbTexture(\"${2:fileName}\")$0",
		},
		{
			"trigger": "ColorSelect:SetColorWheelTexture\t(texture)",
			"contents": "${1:ColorSelect}:SetColorWheelTexture(${2:texture})$0",
		},
		{
			"trigger": "ColorSelect:SetColorWheelThumbTexture\t(texture)",
			"contents": "${1:ColorSelect}:SetColorWheelThumbTexture(${2:texture})$0",
		},
		{
			"trigger": "ColorSelect:SetColorWheelThumbTexture\t(\"fileName\")",
			"contents": "${1:ColorSelect}:SetColorWheelThumbTexture(\"${2:fileName}\")$0",
		},
		{
			"trigger": "ColorSelect:SetDepth\t(depth)",
			"contents": "${1:ColorSelect}:SetDepth(${2:depth})$0",
		},
		{
			"trigger": "ColorSelect:SetDontSavePosition\t(enable)",
			"contents": "${1:ColorSelect}:SetDontSavePosition(${2:enable})$0",
		},
		{
			"trigger": "ColorSelect:SetFlattensRenderLayers\t(enable)",
			"contents": "${1:ColorSelect}:SetFlattensRenderLayers(${2:enable})$0",
		},
		{
			"trigger": "ColorSelect:SetForbidden\t()",
			"contents": "${1:ColorSelect}:SetForbidden()$0",
		},
		{
			"trigger": "ColorSelect:SetFrameLevel\t(level)",
			"contents": "${1:ColorSelect}:SetFrameLevel(${2:level})$0",
		},
		{
			"trigger": "ColorSelect:SetFrameStrata\t(\"strata\")",
			"contents": "${1:ColorSelect}:SetFrameStrata(\"${2:strata}\")$0",
		},
		{
			"trigger": "ColorSelect:SetHeight\t(height)",
			"contents": "${1:ColorSelect}:SetHeight(${2:height})$0",
		},
		{
			"trigger": "ColorSelect:SetHitRectInsets\t(left, right, top, bottom)",
			"contents": "${1:ColorSelect}:SetHitRectInsets(${2:left}, ${3:right}, ${4:top}, ${5:bottom})$0",
		},
		{
			"trigger": "ColorSelect:SetHyperlinksEnabled\t(enable)",
			"contents": "${1:ColorSelect}:SetHyperlinksEnabled(${2:enable})$0",
		},
		{
			"trigger": "ColorSelect:SetID\t(id)",
			"contents": "${1:ColorSelect}:SetID(${2:id})$0",
		},
		{
			"trigger": "ColorSelect:SetIgnoreParentAlpha\t(enable)",
			"contents": "${1:ColorSelect}:SetIgnoreParentAlpha(${2:enable})$0",
		},
		{
			"trigger": "ColorSelect:SetIgnoreParentScale\t(enable)",
			"contents": "${1:ColorSelect}:SetIgnoreParentScale(${2:enable})$0",
		},
		{
			"trigger": "ColorSelect:SetMaxResize\t(maxWidth, maxHeight)",
			"contents": "${1:ColorSelect}:SetMaxResize(${2:maxWidth}, ${3:maxHeight})$0",
		},
		{
			"trigger": "ColorSelect:SetMinResize\t(minWidth, minHeight)",
			"contents": "${1:ColorSelect}:SetMinResize(${2:minWidth}, ${3:minHeight})$0",
		},
		{
			"trigger": "ColorSelect:SetMouseClickEnabled\t(enable)",
			"contents": "${1:ColorSelect}:SetMouseClickEnabled(${2:enable})$0",
		},
		{
			"trigger": "ColorSelect:SetMouseMotionEnabled\t(enable)",
			"contents": "${1:ColorSelect}:SetMouseMotionEnabled(${2:enable})$0",
		},
		{
			"trigger": "ColorSelect:SetMovable\t(enable)",
			"contents": "${1:ColorSelect}:SetMovable(${2:enable})$0",
		},
		{
			"trigger": "ColorSelect:SetParent\t(frame)",
			"contents": "${1:ColorSelect}:SetParent(${2:ColorSelect})$0",
		},
		{
			"trigger": "ColorSelect:SetPoint\t(\"point\", [relativeTo], [\"relativePoint\"], [xOffset], [yOffset])",
			"contents": "${1:ColorSelect}:SetPoint(\"${2:point}\", ${3:[relativeTo]}, \"${4:[relativePoint]}\", ${5:[xOffset]}, ${6:[yOffset]})$0",
		},
		{
			"trigger": "ColorSelect:SetPropagateKeyboardInput\t(enable)",
			"contents": "${1:ColorSelect}:SetPropagateKeyboardInput(${2:enable})$0",
		},
		{
			"trigger": "ColorSelect:SetResizable\t(enable)",
			"contents": "${1:ColorSelect}:SetResizable(${2:enable})$0",
		},
		{
			"trigger": "ColorSelect:SetScale\t(scale)",
			"contents": "${1:ColorSelect}:SetScale(${2:scale})$0",
		},
		{
			"trigger": "ColorSelect:SetScript\t(\"scriptType\", handler)",
			"contents": "${1:ColorSelect}:SetScript(\"${2:scriptType}\", ${3:handler})$0",
		},
		{
			"trigger": "ColorSelect:SetShown\t(enable)",
			"contents": "${1:ColorSelect}:SetShown(${2:enable})$0",
		},
		{
			"trigger": "ColorSelect:SetSize\t(width, height)",
			"contents": "${1:ColorSelect}:SetSize(${2:width}, ${3:height})$0",
		},
		{
			"trigger": "ColorSelect:SetToplevel\t(enable)",
			"contents": "${1:ColorSelect}:SetToplevel(${2:enable})$0",
		},
		{
			"trigger": "ColorSelect:SetUserPlaced\t(enable)",
			"contents": "${1:ColorSelect}:SetUserPlaced(${2:enable})$0",
		},
		{
			"trigger": "ColorSelect:SetWidth\t(width)",
			"contents": "${1:ColorSelect}:SetWidth(${2:width})$0",
		},
		{
			"trigger": "ColorSelect:Show\t()",
			"contents": "${1:ColorSelect}:Show()$0",
		},
		{
			"trigger": "ColorSelect:StartMoving\t()",
			"contents": "${1:ColorSelect}:StartMoving()$0",
		},
		{
			"trigger": "ColorSelect:StartSizing\t()",
			"contents": "${1:ColorSelect}:StartSizing()$0",
		},
		{
			"trigger": "ColorSelect:StopAnimating\t()",
			"contents": "${1:ColorSelect}:StopAnimating()$0",
		},
		{
			"trigger": "ColorSelect:StopMovingOrSizing\t()",
			"contents": "${1:ColorSelect}:StopMovingOrSizing()$0",
		},
		{
			"trigger": "ColorSelect:UnregisterAllEvents\t()",
			"contents": "${1:ColorSelect}:UnregisterAllEvents()$0",
		},
		{
			"trigger": "ColorSelect:UnregisterEvent\t(\"event\")",
			"contents": "${1:ColorSelect}:UnregisterEvent(\"${2:event}\")$0",
		},




		{
			"trigger": "_ColorSelect:CanChangeAttribute\t()",
			"contents": "${1:enabled} = ${2:ColorSelect}:CanChangeAttribute()$0",
		},
		{
			"trigger": "_ColorSelect:CanChangeProtectedState\t()",
			"contents": "${1:canChange} = ${2:ColorSelect}:CanChangeProtectedState()$0",
		},
		{
			"trigger": "_ColorSelect:CreateFontString\t([\"name\"], [\"layer\"], [\"inherits\"])",
			"contents": "${1:fontstring} = ${2:ColorSelect}:CreateFontString(${3:[\"name\"]}, ${4:[\"layer\"]}, ${5:[\"inherits\"]})$0",
		},
		{
			"trigger": "_ColorSelect:CreateLine\t([\"name\"], [\"layer\"], [\"inherits\"], [sublevel])",
			"contents": "${1:texture} = ${2:ColorSelect}:CreateLine(${3:[\"name\"]}, \"${4:[layer]}\", ${5:[\"inherits\"]}, ${6:[sublevel]})$0",
		},
		{
			"trigger": "_ColorSelect:CreateMaskTexture\t([\"name\"], [\"layer\"], [\"inherits\"], [sublevel])",
			"contents": "${1:texture} = ${2:ColorSelect}:CreateMaskTexture(${3:[\"name\"]}, \"${4:[layer]}\", ${5:[\"inherits\"]}, ${6:[sublevel]})$0",
		},
		{
			"trigger": "_ColorSelect:CreateTexture\t([\"name\"], [\"layer\"], [\"inherits\"], [sublevel])",
			"contents": "${1:texture} = ${2:ColorSelect}:CreateTexture(${3:[\"name\"]}, \"${4:[layer]}\", ${5:[\"inherits\"]}, ${6:[sublevel]})$0",
		},
		{
			"trigger": "_ColorSelect:DoesClipChildren\t()",
			"contents": "${1:doesClip} = ${2:ColorSelect}:DoesClipChildren()$0",
		},
		{
			"trigger": "_ColorSelect:GetAlpha\t()",
			"contents": "${1:alpha} = ${2:ColorSelect}:GetAlpha()$0",
		},
		{
			"trigger": "_ColorSelect:GetAnimationGroups\t()",
			"contents": "${1:...} = ${2:ColorSelect}:GetAnimationGroups()$0",
		},
		{
			"trigger": "_ColorSelect:GetAttribute\t(\"name\")",
			"contents": "${1:value} = ${2:ColorSelect}:GetAttribute(${3:\"name\"})$0",
		},
		{
			"trigger": "_ColorSelect:GetBackdrop\t()",
			"contents": "${1:backdrop} = ${2:ColorSelect}:GetBackdrop()$0",
		},
		{
			"trigger": "_ColorSelect:GetBackdropBorderColor\t()",
			"contents": "${1:red}, ${2:green}, ${3:blue}, ${4:alpha} = ${5:ColorSelect}:GetBackdropBorderColor()$0",
		},
		{
			"trigger": "_ColorSelect:GetBackdropColor\t()",
			"contents": "${1:red}, ${2:green}, ${3:blue}, ${4:alpha} = ${5:ColorSelect}:GetBackdropColor()$0",
		},
		{
			"trigger": "_ColorSelect:GetBottom\t()",
			"contents": "${1:bottom} = ${2:ColorSelect}:GetBottom()$0",
		},
		{
			"trigger": "_ColorSelect:GetBoundsRect\t()",
			"contents": "${1:left}, ${2:bottom}, ${3:width}, ${4:height} = ${5:ColorSelect}:GetBoundsRect()$0",
		},
		{
			"trigger": "_ColorSelect:GetCenter\t()",
			"contents": "${1:x}, ${2:y} = ${3:ColorSelect}:GetCenter()$0",
		},
		{
			"trigger": "_ColorSelect:GetChildren\t()",
			"contents": "${1:...} = ${2:ColorSelect}:GetChildren()$0",
		},
		{
			"trigger": "_ColorSelect:GetClampRectInsets\t()",
			"contents": "${1:left}, ${2:right}, ${3:top}, ${4:bottom} = ${5:ColorSelect}:GetClampRectInsets()$0",
		},
		{
			"trigger": "_ColorSelect:GetColorHSV\t()",
			"contents": "${1:hue}, ${2:saturation}, ${3:value} = ${4:ColorSelect}:GetColorHSV()$0",
		},
		{
			"trigger": "_ColorSelect:GetColorRGB\t()",
			"contents": "${1:red}, ${2:blue}, ${3:green} = ${4:ColorSelect}:GetColorRGB()$0",
		},
		{
			"trigger": "_ColorSelect:GetColorValueTexture\t()",
			"contents": "${1:texture} = ${2:ColorSelect}:GetColorValueTexture()$0",
		},
		{
			"trigger": "_ColorSelect:GetColorValueThumbTexture\t()",
			"contents": "${1:texture} = ${2:ColorSelect}:GetColorValueThumbTexture()$0",
		},
		{
			"trigger": "_ColorSelect:GetColorWheelTexture\t()",
			"contents": "${1:texture} = ${2:ColorSelect}:GetColorWheelTexture()$0",
		},
		{
			"trigger": "_ColorSelect:GetColorWheelThumbTexture\t()",
			"contents": "${1:texture} = ${2:ColorSelect}:GetColorWheelThumbTexture()$0",
		},
		{
			"trigger": "_ColorSelect:GetDebugName\t()",
			"contents": "${1:name} = ${2:ColorSelect}:GetDebugName()$0",
		},
		{
			"trigger": "_ColorSelect:GetDepth\t()",
			"contents": "${1:depth} = ${2:ColorSelect}:GetDepth()$0",
		},
		{
			"trigger": "_ColorSelect:GetDontSavePosition\t()",
			"contents": "${1:saved} = ${2:ColorSelect}:GetDontSavePosition()$0",
		},
		{
			"trigger": "_ColorSelect:GetEffectiveAlpha\t()",
			"contents": "${1:alpha} = ${2:ColorSelect}:GetEffectiveAlpha()$0",
		},
		{
			"trigger": "_ColorSelect:GetEffectiveDepth\t()",
			"contents": "${1:depth} = ${2:ColorSelect}:GetEffectiveDepth()$0",
		},
		{
			"trigger": "_ColorSelect:GetEffectivelyFlattensRenderLayers\t()",
			"contents": "${1:doesFlattens} = ${2:ColorSelect}:GetEffectivelyFlattensRenderLayers()$0",
		},
		{
			"trigger": "_ColorSelect:GetEffectiveScale\t()",
			"contents": "${1:scale} = ${2:ColorSelect}:GetEffectiveScale()$0",
		},
		{
			"trigger": "_ColorSelect:GetFlattensRenderLayers\t()",
			"contents": "${1:doesFlattens} = ${2:ColorSelect}:GetFlattensRenderLayers()$0",
		},
		{
			"trigger": "_ColorSelect:GetFrameLevel\t()",
			"contents": "${1:level} = ${2:ColorSelect}:GetFrameLevel()$0",
		},
		{
			"trigger": "_ColorSelect:GetFrameStrata\t()",
			"contents": "${1:strata} = ${2:ColorSelect}:GetFrameStrata()$0",
		},
		{
			"trigger": "_ColorSelect:GetHeight\t()",
			"contents": "${1:height} = ${2:ColorSelect}:GetHeight()$0",
		},
		{
			"trigger": "_ColorSelect:GetHitRectInsets\t()",
			"contents": "${1:left}, ${2:right}, ${3:top}, ${4:bottom} = ${5:ColorSelect}:GetHitRectInsets()$0",
		},
		{
			"trigger": "_ColorSelect:GetHyperlinksEnabled\t()",
			"contents": "${1:enabled} = ${2:ColorSelect}:GetHyperlinksEnabled()$0",
		},
		{
			"trigger": "_ColorSelect:GetID\t()",
			"contents": "${1:id} = ${2:ColorSelect}:GetID()$0",
		},
		{
			"trigger": "_ColorSelect:GetLeft\t()",
			"contents": "${1:left} = ${2:ColorSelect}:GetLeft()$0",
		},
		{
			"trigger": "_ColorSelect:GetMaxResize\t()",
			"contents": "${1:maxWidth}, ${2:maxHeight} = ${3:ColorSelect}:GetMaxResize()$0",
		},
		{
			"trigger": "_ColorSelect:GetMinResize\t()",
			"contents": "${1:minWidth}, ${2:minHeight} = ${3:ColorSelect}:GetMinResize()$0",
		},
		{
			"trigger": "_ColorSelect:GetName\t()",
			"contents": "${1:name} = ${2:ColorSelect}:GetName()$0",
		},
		{
			"trigger": "_ColorSelect:GetNumChildren\t()",
			"contents": "${1:numChildren} = ${2:ColorSelect}:GetNumChildren()$0",
		},
		{
			"trigger": "_ColorSelect:GetNumPoints\t()",
			"contents": "${1:numPoints} = ${2:ColorSelect}:GetNumPoints()$0",
		},
		{
			"trigger": "_ColorSelect:GetNumRegions\t()",
			"contents": "${1:numRegions} = ${2:ColorSelect}:GetNumRegions()$0",
		},
		{
			"trigger": "_ColorSelect:GetObjectType\t()",
			"contents": "${1:type} = ${2:ColorSelect}:GetObjectType()$0",
		},
		{
			"trigger": "_ColorSelect:GetPoint\t(index)",
			"contents": "${1:point}, ${2:relativeTo}, ${3:relativePoint}, ${4:xOffset}, ${5:yOffset} = ${6:ColorSelect}:GetPoint(${7:index})$0",
		},
		{
			"trigger": "_ColorSelect:GetPropagateKeyboardInput\t()",
			"contents": "${1:propagate} = ${2:ColorSelect}:GetPropagateKeyboardInput()$0",
		},
		{
			"trigger": "_ColorSelect:GetRect\t()",
			"contents": "${1:left}, ${2:bottom}, ${3:width}, ${4:height} = ${5:ColorSelect}:GetRect()$0",
		},
		{
			"trigger": "_ColorSelect:GetRegions\t()",
			"contents": "${1:...} = ${2:ColorSelect}:GetRegions()$0",
		},
		{
			"trigger": "_ColorSelect:GetRight\t()",
			"contents": "${1:right} = ${2:ColorSelect}:GetRight()$0",
		},
		{
			"trigger": "_ColorSelect:GetScale\t()",
			"contents": "${1:scale} = ${2:ColorSelect}:GetScale()$0",
		},
		{
			"trigger": "_ColorSelect:GetScript\t(\"scriptType\")",
			"contents": "${1:handler} = ${2:ColorSelect}:GetScript(\"${3:scriptType}\")$0",
		},
		{
			"trigger": "_ColorSelect:GetSize\t()",
			"contents": "${1:width}, ${2:height} = ${3:ColorSelect}:GetSize()$0",
		},
		{
			"trigger": "_ColorSelect:GetTop\t()",
			"contents": "${1:top} = ${2:ColorSelect}:GetTop()$0",
		},
		{
			"trigger": "_ColorSelect:GetWidth\t()",
			"contents": "${1:width} = ${2:ColorSelect}:GetWidth()$0",
		},
		{
			"trigger": "_ColorSelect:HasScript\t(\"scriptType\")",
			"contents": "${1:hasScript} = ${2:ColorSelect}:HasScript(\"${3:scriptType}\")$0",
		},
		{
			"trigger": "_ColorSelect:IsClampedToScreen\t()",
			"contents": "${1:enabled} = ${2:ColorSelect}:IsClampedToScreen()$0",
		},
		{
			"trigger": "_ColorSelect:IsDragging\t()",
			"contents": "${1:isDragging} = ${2:ColorSelect}:IsDragging()$0",
		},
		{
			"trigger": "_ColorSelect:IsEventRegistered\t(\"event\")",
			"contents": "${1:registered}, ${2:unit1}, ${3:unit2} = ${4:ColorSelect}:IsEventRegistered(\"${5:event}\")$0",
		},
		{
			"trigger": "_ColorSelect:IsForbidden\t()",
			"contents": "${1:isForbidden} = ${2:ColorSelect}:IsForbidden()$0",
		},
		{
			"trigger": "_ColorSelect:IsIgnoringDepth\t()",
			"contents": "${1:enabled} = ${2:ColorSelect}:IsIgnoringDepth()$0",
		},
		{
			"trigger": "_ColorSelect:IsIgnoringParentAlpha\t()",
			"contents": "${1:isIgnoring} = ${2:ColorSelect}:IsIgnoringParentAlpha()$0",
		},
		{
			"trigger": "_ColorSelect:IsIgnoringParentScale\t()",
			"contents": "${1:isIgnoring} = ${2:ColorSelect}:IsIgnoringParentScale()$0",
		},
		{
			"trigger": "_ColorSelect:IsJoystickEnabled\t()",
			"contents": "${1:enabled} = ${2:ColorSelect}:IsJoystickEnabled()$0",
		},
		{
			"trigger": "_ColorSelect:IsKeyboardEnabled\t()",
			"contents": "${1:enabled} = ${2:ColorSelect}:IsKeyboardEnabled()$0",
		},
		{
			"trigger": "_ColorSelect:IsMouseClickEnabled\t()",
			"contents": "${1:enabled} = ${2:ColorSelect}:IsMouseClickEnabled()$0",
		},
		{
			"trigger": "_ColorSelect:IsMouseEnabled\t()",
			"contents": "${1:enabled} = ${2:ColorSelect}:IsMouseEnabled()$0",
		},
		{
			"trigger": "_ColorSelect:IsMouseMotionEnabled\t()",
			"contents": "${1:enabled} = ${2:ColorSelect}:IsMouseMotionEnabled()$0",
		},
		{
			"trigger": "_ColorSelect:IsMouseOver\t([topOffset], [leftOffset], [bottomOffset], [rightOffset])",
			"contents": "${1:isOver} = ${2:ColorSelect}:IsMouseOver(${3:[topOffset]}, ${4:[leftOffset]}, ${5:[bottomOffset]}, ${6:[rightOffset]})$0",
		},
		{
			"trigger": "_ColorSelect:IsMouseWheelEnabled\t()",
			"contents": "${1:enabled} = ${2:ColorSelect}:IsMouseWheelEnabled()$0",
		},
		{
			"trigger": "_ColorSelect:IsMovable\t()",
			"contents": "${1:movable} = ${2:ColorSelect}:IsMovable()$0",
		},
		{
			"trigger": "_ColorSelect:IsObjectLoaded\t()",
			"contents": "${1:loaded} = ${2:ColorSelect}:IsObjectLoaded()$0",
		},
		{
			"trigger": "_ColorSelect:IsObjectType\t(\"type\")",
			"contents": "${1:isType} = ${2:ColorSelect}:IsObjectType(\"${3:type}\")$0",
		},
		{
			"trigger": "_ColorSelect:IsProtected\t()",
			"contents": "${1:isProtected}, ${2:explicit} = ${3:ColorSelect}:IsProtected()$0",
		},
		{
			"trigger": "_ColorSelect:IsRectValid\t()",
			"contents": "${1:isValid} = ${2:ColorSelect}:IsRectValid()$0",
		},
		{
			"trigger": "_ColorSelect:IsResizable\t()",
			"contents": "${1:enabled} = ${2:ColorSelect}:IsResizable()$0",
		},
		{
			"trigger": "_ColorSelect:IsShown\t()",
			"contents": "${1:shown} = ${2:ColorSelect}:IsShown()$0",
		},
		{
			"trigger": "_ColorSelect:IsToplevel\t()",
			"contents": "${1:enabled} = ${2:ColorSelect}:IsToplevel()$0",
		},
		{
			"trigger": "_ColorSelect:IsUserPlaced\t()",
			"contents": "${1:enabled} = ${2:ColorSelect}:IsUserPlaced()$0",
		},
		{
			"trigger": "_ColorSelect:IsVisible\t()",
			"contents": "${1:visible} = ${2:ColorSelect}:IsVisible()$0",
		},




		{
			"trigger": "_ColorSelect\thelp",
			"contents": "ColorSelect = {\n\thandlers = {\n\t\t[\"OnAttributeChanged\"] = \"self, name, value\", -- Run when a frame attribute is changed\n\t\t[\"OnChar\"] = \"self, text\", -- Run for each text character typed in the frame\n\t\t[\"OnColorSelect\"] = \"\", -- Run when the color select frame's color selection changes\n\t\t[\"OnDisable\"] = \"self\", -- Run when the frame is disabled\n\t\t[\"OnDragStart\"] = \"self, button\", -- Run when the mouse is dragged starting in the frame\n\t\t[\"OnDragStop\"] = \"self\", -- Run when the mouse button is released after a drag started in the frame\n\t\t[\"OnEnable\"] = \"self\", -- Run when the frame is enabled\n\t\t[\"OnEnter\"] = \"self, motion\", -- Run when the mouse cursor enters the frame's interactive area\n\t\t[\"OnEvent\"] = \"self, event, ...\", -- Run whenever an event fires for which the frame is registered\n\t\t[\"OnHide\"] = \"self\", -- Run when the frame's visbility changes to hidden\n\t\t[\"OnHyperlinkClick\"] = \"self, link, text, button, region, left, bottom, width, height\", -- Run when a mouse button is pressed while the cursor is over the hyperlink\n\t\t[\"OnHyperlinkEnter\"] = \"self, link, text, region, left, bottom, width, height\", -- Run when the mouse cursor enters the hyperlink's interactive area\n\t\t[\"OnHyperlinkLeave\"] = \"self\", -- Run when the mouse cursor leaves the hyperlink's interactive area\n\t\t[\"OnKeyDown\"] = \"self, key\", -- Run when a keyboard key is pressed if the frame is keyboard enabled\n\t\t[\"OnKeyUp\"] = \"self, key\", -- Run when a keyboard key is released if the frame is keyboard enabled\n\t\t[\"OnLeave\"] = \"self, motion\", -- Run when the mouse cursor leaves the frame's interactive area\n\t\t[\"OnLoad\"] = \"self\", -- Run when the frame is created\n\t\t[\"OnMouseDown\"] = \"self, button\", -- Run when a mouse button is pressed while the cursor is over the frame\n\t\t[\"OnMouseUp\"] = \"self, button, upInside\", -- Run when the mouse button is released following a mouse down action in the frame\n\t\t[\"OnMouseWheel\"] = \"self, delta\", -- Run when the frame receives a mouse wheel scrolling action\n\t\t[\"OnReceiveDrag\"] = \"self\", -- Run when the mouse button is released after dragging into the frame\n\t\t[\"OnShow\"] = \"self\", -- Run when the frame becomes visible\n\t\t[\"OnSizeChanged\"] = \"self, width, height\", -- Run when a frame's size changes\n\t\t[\"OnUpdate\"] = \"self, elapsed\", -- Run each time the screen is drawn by the game engine\n\t},\n\tmethods = {\n\t\t\"CanChangeAttribute\", -- Returns whether secure frame attributes can currently be changed\n\t\t\"CanChangeProtectedState\", -- Returns whether protected properties of the region can be changed by non-secure scripts\n\t\t\"ClearAllPoints\", -- Removes all anchor points from the region\n\t\t\"CreateAnimationGroup\", -- Creates a new animation group as a child of the region\n\t\t\"CreateFontString\", -- Creates a new font string object as a child of the frame\n\t\t\"CreateLine\", -- Creates a new line object as a child of the frame\n\t\t\"CreateMaskTexture\", -- Creates a new mask texture object as a child of the frame\n\t\t\"CreateTexture\", -- Creates a new texture object as a child of the frame\n\t\t\"DisableDrawLayer\", -- Prevents display of all child objects of the frame on a specified graphics layer\n\t\t\"DoesClipChildren\", -- Returns whether the frame's childrens are clipped off when exceeding the it's boundaries\n\t\t\"EnableDrawLayer\", -- Allows display of all child objects of the frame on a specified graphics layer\n\t\t\"EnableJoystick\", -- Enables or disables joystick interactivity for the frame\n\t\t\"EnableKeyboard\", -- Enables or disables keyboard interactivity for the frame\n\t\t\"EnableMouse\", -- Enables or disables mouse interactivity for the frame\n\t\t\"EnableMouseWheel\", -- Enables or disables mouse wheel interactivity for the frame\n\t\t\"GetAlpha\", -- Returns the opacity of the region relative to it's parent\n\t\t\"GetAnimationGroups\", -- Returns a list of animation groups belonging to the region\n\t\t\"GetAttribute\", -- Returns the value of a secure frame attribute\n\t\t\"GetBackdrop\", -- Returns information about the frame's backdrop graphic\n\t\t\"GetBackdropBorderColor\", -- Returns the shading color for the frame's border graphic\n\t\t\"GetBackdropColor\", -- Returns the shading color for the frame's background graphic\n\t\t\"GetBottom\", -- Returns the distance from the bottom of the screen to the bottom of the region\n\t\t\"GetBoundsRect\", -- Returns the position and dimension of the smallest area enclosing the frame and it's childrens\n\t\t\"GetCenter\", -- Returns the screen coordinates of the region's center\n\t\t\"GetChildren\", -- Returns a list of child frames of the frame\n\t\t\"GetClampRectInsets\", -- Returns offsets from the frame's edges used when limiting user movement or resizing of the frame\n\t\t\"GetColorHSV\", -- Returns the hue, saturation and value of the currently selected color\n\t\t\"GetColorRGB\", -- Returns the red, green and blue components of the currently selected color\n\t\t\"GetColorValueTexture\", -- Returns the texture for the color picker's value slider background\n\t\t\"GetColorValueThumbTexture\", -- Returns the texture for the color picker's value slider thumb\n\t\t\"GetColorWheelTexture\", -- Returns the texture for the color picker's hue/saturation wheel\n\t\t\"GetColorWheelThumbTexture\", -- Returns the texture for the selection indicator on the color picker's hue/saturation wheel\n\t\t\"GetDebugName\", -- Returns the widget object's debug name\n\t\t\"GetDepth\", -- Returns the 3D depth of the frame\n\t\t\"GetDontSavePosition\", -- Returns whether the position is included for the automatic saving and restoration\n\t\t\"GetEffectiveAlpha\", -- Returns the overall opacity of the frame\n\t\t\"GetEffectiveDepth\", -- Returns the overall 3D depth of the frame\n\t\t\"GetEffectivelyFlattensRenderLayers\", -- Returns whether the frame's childrens are effectively rendered at the same layer level\n\t\t\"GetEffectiveScale\", -- Returns the overall scale factor of the frame\n\t\t\"GetFlattensRenderLayers\", -- Returns whether the frame's childrens are rendered at the same layer level\n\t\t\"GetFrameLevel\", -- Returns the level at which the frame is layered relative to others in its strata\n\t\t\"GetFrameStrata\", -- Returns the general layering strata of the frame\n\t\t\"GetHeight\", -- Returns the height of the region\n\t\t\"GetHitRectInsets\", -- Returns the insets from the frame's edges which determine its mouse-interactable area\n\t\t\"GetHyperlinksEnabled\", -- Returns whether hyperlinks in the frame's text are interactive\n\t\t\"GetID\", -- Returns the frame's numeric identifier\n\t\t\"GetLeft\", -- Returns the distance from the left edge of the screen to the left edge of the region\n\t\t\"GetMaxResize\", -- Returns the maximum size of the frame for user resizing\n\t\t\"GetMinResize\", -- Returns the minimum size of the frame for user resizing\n\t\t\"GetName\", -- Returns the widget object's name\n\t\t\"GetNumChildren\", -- Returns the number of child frames belonging to the frame\n\t\t\"GetNumPoints\", -- Returns the number of anchor points defined for the region\n\t\t\"GetNumRegions\", -- Returns the number of non-frame child regions belonging to the frame\n\t\t\"GetObjectType\", -- Returns the object's widget type\n\t\t\"GetParent\", -- Returns the object's parent object\n\t\t\"GetPoint\", -- Returns information about one of the region's anchor points\n\t\t\"GetPropagateKeyboardInput\", -- Returns whether the frame propagates keyboard events\n\t\t\"GetRect\", -- Returns the position and dimensions of the region\n\t\t\"GetRegions\", -- Returns a list of non-frame child regions belonging to the frame\n\t\t\"GetRight\", -- Returns the distance from the left edge of the screen to the right edge of the region\n\t\t\"GetScale\", -- Returns the frame's scale factor\n\t\t\"GetScript\", -- Returns the widget's handler function for a script\n\t\t\"GetSize\", -- Returns the width and height of the region\n\t\t\"GetTop\", -- Returns the distance from the bottom of the screen to the top of the region\n\t\t\"GetWidth\", -- Returns the width of the region\n\t\t\"HasScript\", -- Returns whether the widget supports a script handler\n\t\t\"Hide\", -- Hides the region\n\t\t\"HookScript\", -- Securely hooks a script handler\n\t\t\"IgnoreDepth\", -- Sets whether the frame's 3D depth property is ignored\n\t\t\"IsClampedToScreen\", -- Returns whether the frame's boundaries are limited to those of the screen\n\t\t\"IsDragging\", -- Returns whether the region is currently being dragged\n\t\t\"IsEventRegistered\", -- Returns whether the frame is registered for a given event\n\t\t\"IsForbidden\", -- Returns if this widget's methods may only be called from secure execution paths\n\t\t\"IsIgnoringDepth\", -- Returns whether the frame's depth property is ignored\n\t\t\"IsIgnoringParentAlpha\", -- Returns if the region is ignoring it's parent alpha changes\n\t\t\"IsIgnoringParentScale\", -- Returns if the region is ignoring it's parent scale changes\n\t\t\"IsJoystickEnabled\", -- Returns whether joystick interactivity is enabled for the frame\n\t\t\"IsKeyboardEnabled\", -- Returns whether keyboard interactivity is enabled for the frame\n\t\t\"IsMouseClickEnabled\", -- Returns whether mouse click interactivity is enabled for the frame\n\t\t\"IsMouseEnabled\", -- Returns whether mouse interactivity is enabled for the frame\n\t\t\"IsMouseMotionEnabled\", -- Returns whether mouse motion interactivity is enabled for the frame\n\t\t\"IsMouseOver\", -- Returns whether the mouse cursor is over the given region\n\t\t\"IsMouseWheelEnabled\", -- Returns whether mouse wheel interactivity is enabled for the frame\n\t\t\"IsMovable\", -- Returns whether the frame can be moved by the user\n\t\t\"IsObjectLoaded\", -- Returns whether the object is loaded\n\t\t\"IsObjectType\", -- Returns whether the object belongs to a given widget type\n\t\t\"IsProtected\", -- Returns whether the region is protected\n\t\t\"IsRectValid\", -- Returns whether the region's rect size is valid\n\t\t\"IsResizable\", -- Returns whether the frame can be resized by the user\n\t\t\"IsShown\", -- Returns whether the region is shown\n\t\t\"IsToplevel\", -- Returns whether the frame is automatically raised to the front when clicked\n\t\t\"IsUserPlaced\", -- Returns whether the frame is flagged for automatic saving and restoration of position and dimensions\n\t\t\"IsVisible\", -- Returns whether the region is visible\n\t\t\"Lower\", -- Reduces the frame's frame level below all other frames in its strata\n\t\t\"Raise\", -- Increases the frame's frame level above all other frames in its strata\n\t\t\"RegisterAllEvents\", -- Registers the frame for all events\n\t\t\"RegisterEvent\", -- Registers the frame for an event\n\t\t\"RegisterForDrag\", -- Registers the frame for dragging\n\t\t\"RegisterUnitEvent\", -- Registers the frame for an event for the specified units\n\t\t\"SetAllPoints\", -- Sets all anchor points of the region to match those of another region\n\t\t\"SetAlpha\", -- Sets the opacity of the region relative to it's parent\n\t\t\"SetAttribute\", -- Sets a secure frame attribute\n\t\t\"SetBackdrop\", -- Sets a backdrop graphic for the frame\n\t\t\"SetBackdropBorderColor\", -- Sets a shading color for the frame's border graphic\n\t\t\"SetBackdropColor\", -- Sets a shading color for the frame's background graphic\n\t\t\"SetClampedToScreen\", -- Sets offsets from the frame's edges used when limiting user movement or resizing of the frame\n\t\t\"SetClampRectInsets\", -- Sets whether the frame's boundaries should be limited to those of the screen\n\t\t\"SetClipsChildren\", -- Sets whether the frame's childrens are clipped off when exceeding the it's boundaries\n\t\t\"SetColorHSV\", -- Sets the color picker's selected color by hue, saturation and value\n\t\t\"SetColorRGB\", -- Sets the color picker's selected color by red, green and blue components\n\t\t\"SetColorValueTexture\", -- Sets the texture object used to display the color picker's value slider\n\t\t\"SetColorValueThumbTexture\", -- Sets the texture for the color picker's value slider thumb\n\t\t\"SetColorWheelTexture\", -- Sets the texture object used to display the color picker's hue/saturation wheel\n\t\t\"SetColorWheelThumbTexture\", -- Sets the texture for the selection indicator on the color picker's hue/saturation wheel\n\t\t\"SetDepth\", -- Sets the 3D depth of the frame\n\t\t\"SetDontSavePosition\", -- Set whether the position are included for the automatic saving and restoration\n\t\t\"SetFlattensRenderLayers\", -- Sets the frame's childrens to be rendered at the same layer level\n\t\t\"SetForbidden\", -- Sets whether the modification of the object's secure methods are forbidden while in combat\n\t\t\"SetFrameLevel\", -- Sets the level at which the frame is layered relative to others in its strata\n\t\t\"SetFrameStrata\", -- Sets the general layering strata of the frame\n\t\t\"SetHeight\", -- Sets the region's height\n\t\t\"SetHitRectInsets\", -- Sets the insets from the frame's edges which determine its mouse-interactable area\n\t\t\"SetHyperlinksEnabled\", -- Sets whether the hyperlinks in the frame's text are interactive\n\t\t\"SetID\", -- Sets a numeric identifier for the frame\n\t\t\"SetIgnoreParentAlpha\", -- Sets if the region should ignore it's parent alpha changes\n\t\t\"SetIgnoreParentScale\", -- Sets if the region should ignore it's parent scale changes\n\t\t\"SetMaxResize\", -- Sets the maximum size of the frame for user resizing\n\t\t\"SetMinResize\", -- Sets the minimum size of the frame for user resizing\n\t\t\"SetMouseClickEnabled\", -- Sets whether the frame can be clicked by the mouse\n\t\t\"SetMouseMotionEnabled\", -- Sets whether the frame's mouse motion is enabled\n\t\t\"SetMovable\", -- Sets whether the frame can be moved by the user\n\t\t\"SetParent\", -- Sets another frame the parent of this region\n\t\t\"SetPoint\", -- Sets an anchor point for the region\n\t\t\"SetPropagateKeyboardInput\", -- Sets whether the frame propagates the keyboard events\n\t\t\"SetResizable\", -- Sets whether the frame can be resized by the user\n\t\t\"SetScale\", -- Sets the frame's scale factor\n\t\t\"SetScript\", -- Sets the widget's handler function for a script\n\t\t\"SetShown\", -- Sets whether the region should be visible or hidden\n\t\t\"SetSize\", -- Sets the size of the region to the specified values\n\t\t\"SetToplevel\", -- Sets whether the frame should automatically come to the front when clicked\n\t\t\"SetUserPlaced\", -- Sets the frame for automatic saving and restoration of position and dimensions\n\t\t\"SetWidth\", -- Sets the region's width\n\t\t\"Show\", -- Shows the region\n\t\t\"StartMoving\", -- Begins repositioning the frame via mouse movement\n\t\t\"StartSizing\", -- Begins resizing the frame via mouse movement\n\t\t\"StopAnimating\", -- Stops any active animations involving the region or it's children\n\t\t\"StopMovingOrSizing\", -- Ends movement or resizing of the frame initiated with\n\t\t\"UnregisterAllEvents\", -- Unregisters the frame from any events for which it is registered\n\t\t\"UnregisterEvent\", -- Unregisters the frame for an event\n\t},\n}",
		},
	]
}
